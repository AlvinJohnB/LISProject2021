import*as e from"@react-pdf/primitives";export*from"@react-pdf/primitives";import t from"fs";import r from"blob-stream";import n from"@react-pdf/font";import o from"@react-pdf/render";import i from"@react-pdf/pdfkit";import c from"@react-pdf/layout";import a from"react-reconciler";import{unstable_scheduleCallback as s,unstable_cancelCallback as d}from"scheduler";const l=(e,t)=>{const r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(let n=0;n<r.length;n+=1){const o=r[n];if("render"===o&&!e[o]!=!t[o])return!1;if("children"!==o&&e[o]!==t[o]){if("object"==typeof e[o]&&"object"==typeof t[o]&&l(e[o],t[o]))continue;return!1}if("children"===o&&("string"==typeof e[o]||"string"==typeof t[o]))return e[o]===t[o]}return!0},p={},f=({onChange:e=(()=>{})})=>a({schedulePassiveEffects:s,cancelPassiveEffects:d,supportsMutation:!0,isPrimaryRenderer:!1,warnsIfNotActing:!1,appendInitialChild(e,t){e.children.push(t)},createInstance:(e,{style:t,children:r,...n})=>({type:e,box:{},style:t||{},props:n||{},children:[]}),createTextInstance:(e,t)=>({type:"TEXT_INSTANCE",value:e}),finalizeInitialChildren:(e,t,r)=>!1,getPublicInstance:e=>e,prepareForCommit(){},clearContainer(){},prepareUpdate:(e,t,r,n)=>!l(r,n),resetAfterCommit:e,resetTextContent(e){},getRootHostContext:()=>p,getChildHostContext:()=>p,shouldSetTextContent:(e,t)=>!1,now:Date.now,useSyncScheduling:!0,appendChild(e,t){e.children.push(t)},appendChildToContainer(e,t){"ROOT"===e.type?e.document=t:e.children.push(t)},insertBefore(e,t,r){var n;const o=null===(n=e.children)||void 0===n?void 0:n.indexOf(r);void 0!==o&&-1!==o&&t&&e.children.splice(o,0,t)},removeChild(e,t){var r;const n=null===(r=e.children)||void 0===r?void 0:r.indexOf(t);void 0!==n&&-1!==n&&e.children.splice(n,1)},removeChildFromContainer(e,t){var r;const n=null===(r=e.children)||void 0===r?void 0:r.indexOf(t);void 0!==n&&-1!==n&&e.children.splice(n,1)},commitTextUpdate(e,t,r){e.value=r},commitUpdate(e,t,r,n,o){const{style:i,...c}=o;e.props=c,e.style=i}});var u="2.0.20";const m=new n;let h;const v={},y=e=>{const t={type:"ROOT",document:null},n=(h=h||f({onChange:()=>{var e;const t=(null===(e=v.change)||void 0===e?void 0:e.slice())||[];for(let e=0;e<t.length;e+=1)t[e]()}})).createContainer(t),a=e=>{h.updateContainer(e,n,null)};e&&a(e);const s=async(e=!0)=>{const r=t.document.props||{},{pdfVersion:n,language:a}=r,s=new i({compress:e,pdfVersion:n,lang:a,displayTitle:!0,autoFirstPage:!1}),d=await c(t.document,m);return o(s,d)},d=(e={})=>{t.document.props.onRender&&t.document.props.onRender(e)};return{on:(e,t)=>{v[e]||(v[e]=[]),v[e].push(t)},container:t,toBlob:async()=>{const e=(await s()).pipe(r());return new Promise((t,r)=>{e.on("finish",()=>{try{const n=e.toBlob("application/pdf");d({blob:n}),t(n)}catch(e){r(e)}}),e.on("error",r)})},toBuffer:async()=>(d(),s()),toString:async()=>{let e="";const t=await s(!1);return new Promise((r,n)=>{try{t.on("data",t=>{e+=t}),t.on("end",()=>{d(),r(e)})}catch(e){n(e)}})},removeListener:(e,t)=>{if(!v[e])return;const r=v[e].indexOf(t);r>-1&&v[e].splice(r,1)},updateContainer:a}},g=m,C={create:e=>e},w=async(e,r,n)=>{const o=y(e),i=await o.toBuffer(),c=t.createWriteStream(r);return i.pipe(c),new Promise((e,t)=>{c.on("finish",()=>{n&&n(i,r),e(i)}),c.on("error",t)})},b=async e=>{const t=y(e);return await t.toBuffer()},P=e=>{return y(e).toString()},x=e=>{throw new Error(`${e} is a web specific API. You're either using this component on Node, or your bundler is not loading react-pdf from the appropriate web build.`)},T=()=>{x("usePDF")},F=()=>{x("PDFViewer")},S=()=>{x("PDFDownloadLink")},O=()=>{x("BlobProvider")},D=w;export default{pdf:y,Font:m,version:"2.0.20",StyleSheet:C,usePDF:T,PDFViewer:F,BlobProvider:O,PDFDownloadLink:S,renderToStream:b,renderToString:P,renderToFile:w,render:w,...e};export{O as BlobProvider,g as Font,S as PDFDownloadLink,F as PDFViewer,C as StyleSheet,f as createRenderer,y as pdf,D as render,w as renderToFile,b as renderToStream,P as renderToString,T as usePDF,u as version};
//# sourceMappingURL=react-pdf.es.min.js.map
