{"version":3,"sources":["images sync /^/.*/.jpg$","images/stcamlogo.jpg","images/ALVINJOHNEB.jpg","images/Alvin John.jpg","images/background.jpg","helpers/AuthContext.js","components/Header.js","components/NotLoggedInModal.js","images/loading.gif","components/LoadingModal.js","components/ptregistration/Ptreg.js","components/ptsearch/Ptsearch.js","components/ptsearch/Searchresult.js","components/ptsearch/Noptrecord.js","components/updatept/Updatept.js","components/addorder/Testrow.js","components/addorder/Testsrow.js","components/addorder/Addordermodal.js","components/addorder/Addorder.js","components/users/UserLogin.js","components/users/UserReg.js","components/orders/Ordersrow.js","components/orders/Orders.js","fonts/arialbd.ttf","components/results/ResultForm.js","components/results/ResultFormA4.js","components/orders/Selectsize.js","components/orders/DetailTr.js","components/orders/OrderDetails.js","components/laboratory/LabNav.js","components/laboratory/checkin/CheckInTr.js","components/LabLoadingModal.js","components/laboratory/checkin/CheckInModal.js","components/laboratory/LabClient.js","components/laboratory/chemistry/ChemTr.js","components/laboratory/chemistry/ChemTest.js","components/laboratory/chemistry/PrevTr.js","components/laboratory/chemistry/PrevResultModal.js","components/laboratory/chemistry/ChemResultmodal.js","components/laboratory/chemistry/ChemForm.js","components/laboratory/hema/Hemaform.js","components/results/Results.js","components/orders/PrevTrxTr.js","components/orders/PrevTrx.js","components/laboratory/cm/CmForm.js","components/laboratory/sero/Seroform.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AuthContext","createContext","Header","history","useHistory","useContext","setAuthState","authState","useEffect","axios","get","headers","accessToken","localStorage","getItem","then","response","data","error","prevAuthState","status","name","username","src","logo","alt","width","className","onClick","removeItem","push","NotLoggedInModal","type","value","LoadingModal","loading","style","marginRight","Ptreg","useState","isLoading","setIsLoading","patientLastId","setPatientLastId","patientAge","setPatientAge","ptId","initialValues","branchid","lastname","firstname","middlename","gender","bday","age","phone","address","idenno","validationSchema","Yup","shape","required","onSubmit","a","post","alert","htmlFor","component","disabled","autoComplete","placeholder","as","onBlur","bdayArray","target","split","year","Date","getFullYear","month","getMonth","day","getDate","agey","agem","aged","Ptsearch","length","console","log","lname","fname","Searchresult","resultData","setResultData","param","useParams","pageNumber","setPageNumber","pagesVisited","pageCount","Math","ceil","onSelect","pId","displayOrders","slice","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","to","Noptrecord","Updatept","updatePtData","setUpdatePtData","Testrow","setTests","test","tests","setCmTests","cmTests","chemTests","setChemTests","hemaTests","setHemaTests","seroTests","setSeroTests","microTests","setMicroTests","testname","section","testToRemove","testcode","filter","Testsrow","setTestsList","testlist","close","testSelected","duplicate","notDuplicate","key","i","index","Addordermodal","props","show","onChange","tr","document","querySelector","getElementsByTagName","toUpperCase","td","innerHTML","innerText","indexOf","display","colSpan","Addorder","testData","setTestData","setShow","labTestInput","setLabTestInput","ptData","setPtData","labNumberInput","setLabNumberInput","lastOrderIdData","setLastOrderIdData","hemaTestsInput","setHemaTestsInput","cmTestsInput","setCmTestsInput","chemTestsInput","setChemTestsInput","seroTestsInput","setSeroTestsInput","microTestsInput","setMicroTestsInput","reducedTests","reduce","acc","curr","reducedChemTests","reducedCmTests","reducedSeroTests","reducedHemaTests","reducedMicroTests","submitHandler","concatLabNo","labNumber","forPtId","testsRequested","forOrderID","sectNumber","OrderId","PatientlistId","reqDr","ptType","hidden","UserLogin","setUsername","password","setPassword","msg","setMsg","event","setItem","UserReg","Ordersrow","order","Patientlists","Moment","createdAt","format","Orders","orders","setOrders","Font","register","family","arialbd","fontStyle","fontWeight","styles","StyleSheet","create","page","paddingTop","paddingBottom","paddingHorizontal","alignItems","header","height","wrap","companyHeader","companyHText","fontSize","textAlign","contactText","marginTop","patientHeader","flex","flexDirection","paddingLeft","pcol","pcol1","patientInfoText","resultBody","resultHeader","fontFamily","footer","justifyContent","position","bottom","footerCol","footerCol1","footerText","footerMessage","resTable","resHText","borderBottom","borderTop","padding","testNameHeader","tableHeader","resTr","body","testName","trCenter","trCenterBold","left","signature","border","ResultForm","size","orientation","fixed","Sectionorders","Sectionresults","result","Testslist","isPackage","unit","Referencevalue","Male","Female","require","releasedBy","default","pathologist","marginBottom","ResultFormA4","Selectsize","sectionserve","fileName","detail","blob","url","DetailTr","modalShow","setModalShow","onGenerate","OrderDetails","orderDetails","setOrderDetails","onOrderDelete","LabNav","checkInTr","details","setOrderID","LabLoadingModal","CheckInModal","onAccept","etests","expTests","pop","setTimeout","setCheckInDetails","closeModal","LabClient","checkInDetails","setSection","orderid","orderselected","setSelected","CheckInTr","showModal","ChemTr","setPrevResultData","setResultFormData","setSectionResultArray","selectHandler","ChemTest","ptdata","saveResult","sResultID","catch","err","isQuali","options","option","PrevTr","prevResultData","PrevResultModal","showPrevResModal","setShowPrevResModal","displayPrevResults","ChemResultmodal","setSectionData","resultFormData","sectionResultArray","patholist","setPatho","pathoSelected","setPathoSelected","onRelease","sectOrderID","undoCheckIn","onUndoRelease","patho","ChemForm","sectionData","Hemaform","Results","PrevTrxTr","PrevTrx","Cmform","App","Provider","path","exact","Seroform","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da8e11c3.chunk.js","sourcesContent":["var map = {\n\t\"./ALVINJOHNEB.jpg\": 761,\n\t\"./Alvin John.jpg\": 762,\n\t\"./background.jpg\": 763,\n\t\"./stcamlogo.jpg\": 56\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 112;","export default __webpack_public_path__ + \"static/media/stcamlogo.b4793c8f.jpg\";","export default __webpack_public_path__ + \"static/media/ALVINJOHNEB.b4793c8f.jpg\";","export default __webpack_public_path__ + \"static/media/Alvin John.b4793c8f.jpg\";","export default __webpack_public_path__ + \"static/media/background.50aebc22.jpg\";","import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext(\"\");","import React, { useEffect } from 'react'\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../helpers/AuthContext';\r\nimport './ptregistration/ptreg.css'\r\nimport logo from '../images/stcamlogo.jpg'\r\nimport {useHistory} from 'react-router-dom'\r\nimport axios from 'axios';\r\n\r\nfunction Header() {\r\n  let history = useHistory();\r\n    const {setAuthState, authState} = useContext(AuthContext);\r\n\r\n    useEffect(() => {\r\n      axios.get(\"http://localhost:3001/auth/auth\",{\r\n        headers:{\r\n          accessToken: localStorage.getItem(\"accessToken\"),\r\n        }\r\n      }).then((response) => {\r\n        if(response.data.error){\r\n          setAuthState(prevAuthState => {\r\n            return { ...prevAuthState, status: false}\r\n          })\r\n        }else{\r\n          setAuthState(() => {\r\n            return { name: response.data.name, username: response.data.username, id: response.data.id, status: true}\r\n          })\r\n        }\r\n    })\r\n    },[setAuthState])\r\n\r\n    const logOut = () => {\r\n      localStorage.removeItem(\"accessToken\")\r\n      setAuthState({...authState, status: false});\r\n      history.push('/login');\r\n    }\r\n    return (\r\n      <header>\r\n        <div><img src={logo} alt=\"Logo\" width=\"75px\" /><br />St. Camillus de Lellis General Hospital</div>\r\n        <div className=\"userDiv\">\r\n        {authState.status === true && <p>Welcome, {authState.name}. <p className=\"logOut\" onClick={logOut}>Log-out?</p></p>}\r\n        {authState.status === false && <p>Welcome! Please log-in!</p>}</div>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport '../components/laboratory/checkin/checkinmodal.css'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from '../helpers/AuthContext';\r\n \r\nfunction NotLoggedInModal() {\r\n    const { authState } = useContext(AuthContext);\r\n\r\n    let history = useHistory();\r\n    \r\n    if(authState.status === true){\r\n        return null\r\n\r\n    }else{\r\n        return (\r\n            <div className=\"checkin-modal\">\r\n                <div className=\"login-modal-wrapper\">\r\n                    <div className=\"login-modal-header\">\r\n                        <div><strong>&nbsp;</strong></div>\r\n                    </div>\r\n                        <div className=\"checkin-modal-body\">\r\n                           <strong>You are not logged-in!</strong><br />\r\n                           <p className=\"tablefooter\">Please press the button to go to log-in window.</p>\r\n                        </div>\r\n                    <div className=\"checkin-modal-footer\">\r\n                            <input type=\"button\" className=\"checkin-btn reject\" value=\"Log-in\" onClick={()=>{history.push('/login')}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default NotLoggedInModal\r\n","export default __webpack_public_path__ + \"static/media/loading.d3fbaf2b.gif\";","import React from 'react'\r\nimport '../components/laboratory/checkin/checkinmodal.css'\r\nimport loading from '../images/loading.gif'\r\n\r\nfunction LoadingModal() {\r\n\r\n    return (\r\n        <div className=\"loading-modal\">\r\n            <div className=\"login-modal-wrapper\">\r\n                <div className=\"loading-modal-header\">\r\n                    <div><strong>&nbsp;</strong></div>\r\n                </div>\r\n                    <div className=\"loading-modal-body\">\r\n                        <img src={loading} alt=\"loading\" width=\"auto\"  style={{marginRight: \"10px\"}}/>\r\n                       <strong>Loading please wait...</strong><br />\r\n                    </div>\r\n                <div className=\"checkin-modal-footer\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoadingModal\r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport NotLoggedInModal from '../NotLoggedInModal';\r\n\r\nimport './ptreg.css';\r\nimport LoadingModal from '../LoadingModal';\r\n\r\nconst Ptreg = () => {\r\n    let history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [patientLastId, setPatientLastId] = useState(0);\r\n    const [patientAge, setPatientAge] = useState(0);\r\n\r\n    useEffect( () => {\r\n      axios.get(\"http://localhost:3001/patient\").then((response) => {\r\n        setPatientLastId(response.data)\r\n      });\r\n    }, []);\r\n\r\n    if(isLoading === true){\r\n        return (\r\n            <LoadingModal />\r\n        )\r\n    }\r\n    \r\n    const branch = \"CAMILLUS-\";\r\n    let ptId = `${branch}${patientLastId.id+1}`;\r\n\r\n    let getAge = (e) => {\r\n\r\n        var birthday = e.target.value;\r\n        var bdayArray = birthday.split(\"-\");\r\n\r\n\r\n        var year = new Date().getFullYear();\r\n        var month = new Date().getMonth()+1;\r\n        var day = new Date().getDate();\r\n\r\n        var agey = year - bdayArray[0];\r\n        var agem = month - bdayArray[1];\r\n        var aged = day - bdayArray[2];\r\n\r\n        if(agem < 0){\r\n            agey = agey -1\r\n            agem = agem + 12\r\n        }\r\n\r\n        if(aged<0){\r\n            agem = agem-1\r\n            aged = aged+31\r\n        }\r\n        setPatientAge(agey);\r\n        initialValues.age = agey;\r\n        initialValues.branchid = ptId;\r\n    }\r\n\r\n    \r\n    const initialValues = {\r\n        branchid: ptId,\r\n        lastname: \"\",\r\n        firstname: \"\",\r\n        middlename: \"\",\r\n        gender:\"\",\r\n        bday: \"\",\r\n        age: patientAge,\r\n        phone: \"\",\r\n        address:\"\",\r\n        idenno:\"\"\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        branchid: Yup.string(),\r\n        lastname: Yup.string().required(\"This field is required!\"),\r\n        firstname: Yup.string().required(\"This field is required!\"),\r\n        middlename: Yup.string(),\r\n        bday: Yup.string().required(\"This field is required!\"),\r\n        age: Yup.number().required(),\r\n        gender: Yup.string().required(\"This field is required!\"),\r\n        phone: Yup.string().required(\"This field is required!\"),\r\n        address: Yup.string().required(\"This field is required!\"),\r\n        idenno: Yup.string(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsLoading(true);\r\n        await axios.get(\"http://localhost:3001/patient\").then((response) => {\r\n            setPatientLastId(response.data)\r\n            const branch = \"CAMILLUS-\";\r\n            data.branchid = `${branch}${response.data.id+1}`;\r\n          });\r\n\r\n        data.age = patientAge;\r\n\r\n        axios.post(\"http://localhost:3001/patient/addpatient\", data,\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in. Please log-in!\");\r\n                history.push('/login');\r\n            }else{\r\n                history.push(`/addorder/for${ptId}`);\r\n            }\r\n        })\r\n    }\r\n    return (\r\n    <div className=\"ptregwrapper\">\r\n        <NotLoggedInModal />\r\n            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                <Form>\r\n\r\n                <h1>Patient Registration</h1>\r\n                <hr />\r\n                <h4>Personal Information</h4>\r\n                <div className=\"form-group\">\r\n                    <div className=\"form-content\">\r\n                       <label htmlFor=\"branchid\" className=\"form-content\">Patient ID:</label>\r\n                       <ErrorMessage name=\"branchid\" component=\"span\" /> \r\n                       <Field \r\n                            name=\"branchid\"\r\n                            id=\"form-field\"\r\n                            type=\"text\"\r\n                            value={ptId}\r\n                            disabled={true}\r\n                       />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                \r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"lastname\">Lastname:</label> \r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            id=\"form-field\"\r\n                            name=\"lastname\"\r\n                            placeholder=\"Lastname\"\r\n                        /><br />\r\n                        <ErrorMessage name=\"lastname\" component=\"span\" />\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"firstname\">First name:</label>\r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            id=\"form-field\"\r\n                            name=\"firstname\"\r\n                            placeholder=\"First name\"\r\n                        /><br />\r\n                        <ErrorMessage name=\"firstname\" component=\"span\" />\r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"middlename\">Middle name:</label>\r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            id=\"form-field\"\r\n                            name=\"middlename\"\r\n                            placeholder=\"Middle name\"\r\n                        /><br />\r\n                         <ErrorMessage name=\"middlename\" component=\"span\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"gender\">Gender:</label>\r\n                        <Field id=\"form-field\" as=\"select\" name=\"gender\">\r\n                            <option  value=\"invalid\">Select gender</option>\r\n                            <option  value=\"Male\">Male</option>\r\n                            <option  value=\"Female\">Female</option>\r\n                        </Field><br />\r\n                        <ErrorMessage name=\"gender\" component=\"span\" />\r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"bday\">Birthdate:</label>\r\n                        <Field \r\n                        autoComplete=\"off\"\r\n                        id=\"form-field\"\r\n                        type=\"date\"\r\n                        onBlur={getAge}\r\n                        name=\"bday\" /><br />\r\n                        <ErrorMessage name=\"bday\" component=\"span\" />\r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" name=\"age\">Age:</label>\r\n                        <Field id=\"form-field\" name=\"age\" type=\"number\" value={patientAge} disabled={true}/>\r\n                    </div>\r\n                </div>\r\n                <br /><h4>Contact and other information</h4>\r\n                    <div className=\"form-group\">\r\n\r\n                        <div className=\"form-content addressdiv\">\r\n                        <label className=\"form-content\" htmlFor=\"address\">Address:</label>\r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            name=\"address\"\r\n                            id=\"form-field\"\r\n                            type=\"text\"\r\n                            placeholder=\"Address\"\r\n                        /><br />\r\n                         <ErrorMessage name=\"address\" component=\"span\" />\r\n                        </div>\r\n                        <div className=\"form-content\">\r\n                            <label className=\"form-content\" htmlFor=\"phone\">Phone Number:</label>\r\n                            <Field \r\n                                autoComplete=\"off\"\r\n                                id=\"form-field\"\r\n                                name=\"phone\"\r\n                                type=\"tel\"\r\n                                placeholder=\"Phone number\"\r\n                            /><br />\r\n                             <ErrorMessage name=\"phone\" component=\"span\" />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"idenno\">Identification Card No. (SC, PWD, etc.)</label>\r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            id=\"form-field\"\r\n                            name=\"idenno\"\r\n                            placeholder=\"ID Number\"\r\n                        />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button className=\"form-content form-botton\" type=\"submit\">Submit</button>\r\n\r\n                </Form>\r\n            </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ptreg;\r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory, } from 'react-router-dom';\r\nimport NotLoggedInModal from '../NotLoggedInModal';\r\nimport '../ptregistration/ptreg.css';\r\n\r\nconst Ptsearch = () => {\r\n\r\n  const history = useHistory();\r\n  const initialValues ={\r\n    lastname: \"\",\r\n    firstname:\"\"\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    lastname: Yup.string().required(\"This field is required!\"),\r\n    firstname: Yup.string()\r\n  })\r\n\r\n  const onSubmit = async (data) => {\r\n\r\n    await axios.post('http://localhost:3001/patient/findpatient', data).then((response) => {\r\n    \r\n    if(response.data.length <= 0){\r\n      console.log(\"No patient found\");\r\n      history.push('/noptfound');\r\n\r\n    } else {\r\n      let lname = data.lastname\r\n      let fname = data.firstname\r\n      history.push(`/searchresults/${lname},${fname}`)\r\n    }\r\n    })\r\n\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"ptregwrapper\">\r\n      <NotLoggedInModal />\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n        <Form>\r\n          <h1>Patient Search</h1>\r\n          <hr />\r\n          <h4>Enter Patient Information:</h4>\r\n          <div className=\"form-group\">\r\n            <div className=\"form-content\">\r\n              <label className=\"form-content\" htmlFor=\"lastname\">Lastname:</label>\r\n              <Field\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                name=\"lastname\"\r\n                id=\"form-field\"\r\n                placeholder=\"Enter last name\"\r\n              /><br />\r\n              <ErrorMessage name=\"lastname\" component=\"span\"/>\r\n            </div>\r\n            <div className=\"form-content\">\r\n              <label className=\"form-content\" htmlFor=\"firstname\">First name:</label>\r\n              <Field\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                name=\"firstname\"\r\n                id=\"form-field\"\r\n                placeholder=\"Enter first name\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <button className=\"form-content form-botton\" type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ptsearch;\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams, useHistory, Link } from 'react-router-dom';\r\n\r\nimport ReactPaginate from 'react-paginate';\r\nimport '../ptregistration/ptreg.css';\r\nimport LoadingModal from '../LoadingModal';\r\n\r\nconst Searchresult = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [resultData, setResultData] = useState([])\r\n\r\n    let { param } = useParams();\r\n    let history = useHistory();\r\n    \r\n    useEffect(() => {\r\n\r\n    axios.get(`http://localhost:3001/patient/findpatient/${param}`).then((response) => {\r\n\r\n        setResultData(response.data);\r\n        setIsLoading(false);\r\n    })\r\n\r\n    },[param])\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 10;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(resultData.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n    \r\n    const onSelect = (e) => {\r\n        const pId = e.target.id\r\n        history.push(`/updatept/${pId}`)\r\n    }\r\n    const displayOrders = resultData.slice(pagesVisited, pagesVisited + orderPerPage).map((value) => {\r\n        return (<tr className=\"tbcontent\" key={value.id}>\r\n        <td onClick={onSelect} id={value.branchid}>{value.lastname}, {value.firstname} {value.middlename}</td>\r\n        <td onClick={onSelect} id={value.branchid}>{value.age}</td>\r\n        <td onClick={onSelect} id={value.branchid}>{value.gender}</td>\r\n        <td onClick={onSelect} id={value.branchid}>{value.bday}</td>\r\n    </tr>)\r\n    })\r\n\r\n \r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"ptregwrapper\">\r\n            <h3>Patient Search result/s:</h3>\r\n            <hr />\r\n            <div className=\"tablewrapper\">\r\n            <table className=\"table\">\r\n                <tbody>\r\n                    <tr className=\"header\">\r\n                        <td>Name</td>\r\n                        <td>Age</td>\r\n                        <td>Gender</td>\r\n                        <td>Birthday</td>\r\n                    </tr>\r\n                    {displayOrders}\r\n                </tbody>\r\n            </table>\r\n            <br />\r\n            {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n            <p className=\"tablefooter\"><Link to=\"/ptsearch\">Back to Patient Search</Link></p>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchresult\r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport { useHistory, } from 'react-router-dom';\r\n\r\nimport '../ptregistration/ptreg.css';\r\n\r\nconst Noptrecord = () => {\r\n\r\n  const history = useHistory();\r\n  const initialValues ={\r\n    lastname: \"\",\r\n    firstname:\"\"\r\n  }\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    lastname: Yup.string().required(\"This field is required!\"),\r\n    firstname: Yup.string()\r\n  })\r\n\r\n  const onSubmit = (data) => {\r\n\r\n    axios.post('http://localhost:3001/patient/findpatient', data).then((response) => {\r\n    console.log(response.data.length);\r\n    if(response.data.length <= 0){\r\n      console.log(\"No patient found\");\r\n      history.push('/noptfound');\r\n\r\n    } else {\r\n      let lname = data.lastname\r\n      let fname = data.firstname\r\n      history.push(`/searchresults/${lname},${fname}`)\r\n    }\r\n    })\r\n\r\n  }\r\n  return (\r\n    <div className=\"ptregwrapper\">\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n        <Form>\r\n          <h1>Patient Search</h1>\r\n          <hr />\r\n          <p className=\"error\">No patient record found.</p>\r\n          <h4>Enter Patient Information:</h4>\r\n          <div className=\"form-group\">\r\n            <div className=\"form-content\">\r\n              <label className=\"form-content\" htmlFor=\"lastname\">Lastname:</label>\r\n              <Field\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                name=\"lastname\"\r\n                id=\"form-field\"\r\n                placeholder=\"Enter last name\"\r\n              />\r\n              <ErrorMessage name=\"lastname\" component=\"span\"/>\r\n            </div>\r\n\r\n            <div className=\"form-content\">\r\n              <label className=\"form-content\" htmlFor=\"firstname\">First name:</label>\r\n              <Field\r\n                autoComplete=\"off\"\r\n                type=\"text\"\r\n                name=\"firstname\"\r\n                id=\"form-field\"\r\n                placeholder=\"Enter first name\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <button className=\"form-content form-botton\" type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Noptrecord;\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport '../../components/ptregistration/ptreg.css'\r\nimport LoadingModal from '../LoadingModal';\r\n\r\nconst Updatept = () => {\r\n\r\n    const [updatePtData, setUpdatePtData] = useState({})\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const history = useHistory();\r\n\r\n    let { pId } = useParams();\r\n    \r\n    useEffect(() => {\r\n\r\n    axios.get(`http://localhost:3001/patient/findpatientById/${pId}`).then((response) => {\r\n        setUpdatePtData(response.data);\r\n        setIsLoading(false);\r\n    })\r\n    },[pId])\r\n    \r\n    const initialValues = {\r\n        branchid: updatePtData.branchid,\r\n        lastname: updatePtData.lastname,\r\n        firstname: updatePtData.firstname,\r\n        middlename: updatePtData.middlename,\r\n        gender:updatePtData.gender,\r\n        bday: updatePtData.bday,\r\n        age: updatePtData.age,\r\n        phone: updatePtData.phone,\r\n        address:updatePtData.address,\r\n        idenno:updatePtData.idenno\r\n    }\r\n\r\n    let getAge = (e) => {\r\n\r\n        var birthday = e.target.value;\r\n        var bdayArray = birthday.split(\"-\");\r\n\r\n\r\n        var year = new Date().getFullYear();\r\n        var month = new Date().getMonth()+1;\r\n        var day = new Date().getDate();\r\n\r\n        var agey = year - bdayArray[0];\r\n        var agem = month - bdayArray[1];\r\n        var aged = day - bdayArray[2];\r\n\r\n        if(agem < 0){\r\n            agey = agey -1\r\n            agem = agem + 12\r\n        }\r\n\r\n        if(aged<0){\r\n            agem = agem-1\r\n            aged = aged+31\r\n        }\r\n        setUpdatePtData({age: agey});\r\n\r\n    }\r\n    \r\n\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        branchid: Yup.string(),\r\n        lastname: Yup.string().required(\"This field is required!\"),\r\n        firstname: Yup.string().required(\"This field is required!\"),\r\n        middlename: Yup.string(),\r\n        bday: Yup.string().required(\"This field is required!\"),\r\n        age: Yup.number().required(),\r\n        gender: Yup.string().required(\"This field is required!\"),\r\n        phone: Yup.string().required(\"This field is required!\"),\r\n        address: Yup.string().required(\"This field is required!\"),\r\n        idenno: Yup.string(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onPrevTrans = () => {\r\n        history.push(`/porders/${pId}`)\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        setIsLoading(true);\r\n        data.age = initialValues.age;\r\n        axios.post(\"http://localhost:3001/patient/updatept\", data,\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\")\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in, please log-in!\");\r\n                history.push(\"/login\");\r\n            }else{\r\n                history.push(`/addorder/for${pId}`);\r\n            }\r\n        })\r\n    }\r\n   \r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"ptregwrapper\">\r\n        <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n            <Form>\r\n\r\n            <h1>Update Patient Information</h1>\r\n            <hr />\r\n            <h4>Personal Information</h4>\r\n            <div className=\"form-group\">\r\n                <div className=\"form-content\">\r\n                   <label htmlFor=\"branchid\" className=\"form-content\">Patient ID:</label>\r\n                   <ErrorMessage name=\"branchid\" component=\"span\" /> \r\n\r\n                   <Field \r\n                        name=\"branchid\"\r\n                        id=\"form-field\"\r\n                        type=\"text\"\r\n                        value={initialValues.branchid}\r\n                        disabled={true}\r\n                   />\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n            \r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"lastname\">Lastname:</label> \r\n                    <Field \r\n                        autoComplete=\"off\"\r\n                        id=\"form-field\"\r\n                        name=\"lastname\"\r\n                        placeholder=\"Lastname\"\r\n                    />\r\n                    <ErrorMessage name=\"lastname\" component=\"span\" />\r\n                    \r\n                </div>\r\n\r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"firstname\">First name:</label>\r\n                    <Field \r\n                        autoComplete=\"off\"\r\n                        id=\"form-field\"\r\n                        name=\"firstname\"\r\n                        placeholder=\"First name\"\r\n                    />\r\n                    <ErrorMessage name=\"firstname\" component=\"span\" />\r\n                </div>\r\n\r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"middlename\">Middle name:</label>\r\n                    <Field \r\n                        autoComplete=\"off\"\r\n                        id=\"form-field\"\r\n                        name=\"middlename\"\r\n                        placeholder=\"Middle name\"\r\n                    />\r\n                     <ErrorMessage name=\"middlename\" component=\"span\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n\r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"gender\">Gender:</label>\r\n                    <Field id=\"form-field\" as=\"select\" name=\"gender\">\r\n                        <option  value=\"invalid\">Select gender</option>\r\n                        <option  value=\"Male\">Male</option>\r\n                        <option  value=\"Female\">Female</option>\r\n                    </Field><br />\r\n                    <ErrorMessage name=\"gender\" component=\"span\" />\r\n                </div>\r\n\r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"bday\">Birthdate:</label>\r\n                    <Field \r\n                    id=\"form-field\"\r\n                    type=\"date\"\r\n                    onBlur={getAge}\r\n                    name=\"bday\" />\r\n                    <ErrorMessage name=\"bday\" component=\"span\" />\r\n                </div>\r\n\r\n                <div className=\"form-content\">\r\n                    <label className=\"form-content\" name=\"age\">Age:</label>\r\n                    <Field id=\"form-field\" name=\"age\" type=\"number\" value={updatePtData.age} disabled={true} />\r\n                </div>\r\n            </div>\r\n            <br /><h4>Contact and other information</h4>\r\n                <div className=\"form-group\">\r\n\r\n                    <div className=\"form-content addressdiv\">\r\n                    <label className=\"form-content\" htmlFor=\"address\">Address:</label>\r\n                    <Field \r\n                        autoComplete=\"off\"\r\n                        name=\"address\"\r\n                        id=\"form-field\"\r\n                        type=\"text\"\r\n                        placeholder=\"Address\"\r\n                    />\r\n                     <ErrorMessage name=\"address\" component=\"span\" />\r\n                    </div>\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"phone\">Phone Number:</label>\r\n                        <Field \r\n                            autoComplete=\"off\"\r\n                            id=\"form-field\"\r\n                            name=\"phone\"\r\n                            type=\"tel\"\r\n                            placeholder=\"Phone number\"\r\n                        />\r\n                         <ErrorMessage name=\"phone\" component=\"span\" />\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <div className=\"form-content\">\r\n                    <label className=\"form-content\" htmlFor=\"idenno\">Identification Card No. (SC, PWD, etc.)</label>\r\n                    <Field \r\n                        autoComplete=\"off\"\r\n                        id=\"form-field\"\r\n                        name=\"idenno\"\r\n                        placeholder=\"ID Number\"\r\n                    />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <button className=\"form-content form-botton widthauto\" type=\"submit\">Update / Proceed</button>\r\n                    <button className=\"form-content form-botton widthauto filter\" onClick={onPrevTrans} type=\"button\">Show Previous Transactions</button>\r\n                </div>\r\n                \r\n\r\n            </Form>\r\n        </Formik>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Updatept\r\n","import React from 'react'\r\n\r\nimport './modal.css'\r\nconst Testrow = ({setTests, test, tests, setCmTests, cmTests, chemTests, setChemTests, hemaTests, setHemaTests, seroTests, setSeroTests, microTests, setMicroTests}) => {\r\n\r\n    const removeHandler = () => {\r\n        \r\n        \r\n        // Check what section\r\n        let section = test.section;\r\n        let testToRemove = test.testcode;\r\n\r\n        if(section === \"CM\"){\r\n            setCmTests(cmTests.filter((test) => test.testcode !== testToRemove));\r\n        }\r\n        if(section === \"Chemistry\"){\r\n            setChemTests(chemTests.filter((test) => test.testcode !== testToRemove));\r\n        }\r\n        if(section === \"Hematology\"){\r\n            setHemaTests(hemaTests.filter((test) => test.testcode !== testToRemove));\r\n        }\r\n        if(section === \"Serology\"){\r\n            setSeroTests(seroTests.filter((test) => test.testcode !== testToRemove));\r\n        }\r\n        if(section === \"Micro\"){\r\n            setMicroTests(microTests.filter((test) => test.testcode !== testToRemove));\r\n        }\r\n\r\n        setTests(tests.filter((test) => test.testcode !== testToRemove));\r\n\r\n    }\r\n\r\n    return (\r\n        <tr className=\"tbcontentremove\">\r\n            <td>{test.testname}</td>\r\n            <td onClick={removeHandler}>Remove</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Testrow\r\n","import React from 'react'\r\n\r\nimport './modal.css'\r\n\r\nconst Testsrow = ({setTestsList, setHemaTests, setCmTests, setSeroTests, setMicroTests, testcode, testname, test, testlist, close, cmTests, microTests, hemaTests, chemTests, seroTests, setChemTests }) => {\r\n\r\n    const handleClick = () => {\r\n        let testSelected = test;\r\n\r\n        // Check for duplicate\r\n        let duplicate = false;\r\n        let notDuplicate = true;\r\n\r\n        let key = testlist.length;\r\n\r\n        if(testlist.length >= 1){\r\n            for(let i = 0; i < testlist.length; i++){\r\n                let test = testlist[i].testname;\r\n                if(testSelected.testname === test){\r\n                    duplicate = true;\r\n                } else {\r\n                    notDuplicate = true;\r\n                }\r\n            }\r\n        }\r\n        if(duplicate){\r\n            alert(\"Duplicate test detected, please recheck.\");\r\n            close();\r\n        } else if(notDuplicate){\r\n            // Check what section\r\n            let section = testSelected.section;\r\n            if(section === \"Chemistry\"){\r\n                setChemTests([...chemTests, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section}])\r\n            }else if(section === \"Hematology\"){\r\n                setHemaTests([...hemaTests, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section}])\r\n            }else if(section === \"CM\"){\r\n                setCmTests([...cmTests, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section}])\r\n            }else if(section === \"Serology\"){\r\n                setSeroTests([...seroTests, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section}])\r\n            }else if(section === \"Micro\"){\r\n                setMicroTests([...microTests, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section}])\r\n            }\r\n            setTestsList([...testlist, {testname: testSelected.testname, testcode: testSelected.testcode, section: testSelected.section, index: key} ])\r\n            close();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <tr className=\"tbcontent\">\r\n            <td className=\"width-1\">{testcode}</td>\r\n            <td className=\"width-2\">{testname}</td>\r\n            <td className=\"width-1\" onClick={handleClick}>Select</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Testsrow\r\n","import React from 'react'\r\n\r\n\r\nimport './modal.css'\r\nimport Testsrow from './Testsrow';\r\n\r\nconst Addordermodal = (props) => {\r\n\r\n\r\n    if(!props.show){\r\n        return null\r\n    }\r\n\r\n    const testFilter = (e) => {\r\n        const table = document.querySelector(\"#teststable\");\r\n        const tr = table.getElementsByTagName(\"tr\");\r\n        let filter = e.target.value.toUpperCase();\r\n        \r\n\r\n        if(tr){\r\n            for(let i = 0; i < tr.length; i++){\r\n                let td = tr[i].getElementsByTagName(\"td\")[0]\r\n                if(td){\r\n                    let test = td.innerHTML || td.innerText\r\n                    if(test.indexOf(filter) > -1){\r\n                        tr[i].style.display = \"\";\r\n                    }else{\r\n                        tr[i].style.display = \"none\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className =\"modal\">\r\n            <div className=\"modal-wrapper\">\r\n                <div className=\"modal-header\">\r\n                    <div><strong>Search Tests:</strong>\r\n                    </div>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    <div className=\"tablewrapper\">\r\n                    <input className=\"form-input\" autoComplete=\"off\" id=\"myInput\" type=\"text\" name=\"searchInput\" placeholder=\"Type testcode...\" onChange={testFilter}/>\r\n                        <table className=\"testtable\">\r\n                        <tbody>\r\n                            <tr className=\"tableheader\">\r\n                                <td className=\"width-1\">Test code</td>\r\n                                <td className=\"width-2\">Test name</td>\r\n                                <td className=\"width-1\">Action</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td colSpan=\"3\">\r\n                                    <div className=\"tablebody\">\r\n                                        <table id=\"teststable\" className=\"tablecontent\">\r\n                                            <tbody>\r\n                                                {props.tests.map((test, key) => {\r\n                                                    return (\r\n                                                        <Testsrow \r\n                                                            key={key} \r\n                                                            testcode={test.testcode} \r\n                                                            testlist={props.testlist} \r\n                                                            setTestsList={props.setTestsList}\r\n                                                            testname={test.testname} \r\n                                                            test={test} \r\n                                                            close={props.close} \r\n                                                            hemaTests={props.hemaTests}\r\n                                                            setHemaTests={props.setHemaTests}\r\n                                                            cmTests={props.cmTests}\r\n                                                            setCmTests={props.setCmTests}\r\n                                                            chemTests={props.chemTests}\r\n                                                            seroTests={props.seroTests}\r\n                                                            setSeroTests={props.setSeroTests}\r\n                                                            microTests={props.microTests}\r\n                                                            setMicroTests={props.setMicroTests}\r\n                                                            setChemTests={props.setChemTests}\r\n                                                        />\r\n                                                    )\r\n                                                })}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <input className=\"closeButton\" type=\"button\" value=\"Close\" onClick={props.close} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addordermodal\r\n","import React from 'react'\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport Testrow from './Testrow';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n\r\nimport Addordermodal from './Addordermodal'\r\nimport '../../components/ptregistration/ptreg.css'\r\nimport './modal.css'\r\nimport LoadingModal from '../LoadingModal';\r\n\r\n\r\nconst Addorder = () => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [testData, setTestData] = useState([])\r\n    const [show, setShow] = useState(false)\r\n    const [tests, setTests] = useState([])\r\n    const [labTestInput, setLabTestInput] = useState(\"\")\r\n    const [ptData, setPtData] = useState({})\r\n    const [labNumberInput, setLabNumberInput] = useState(\"\")\r\n    const [lastOrderIdData, setLastOrderIdData] = useState({})\r\n    \r\n    const [hemaTests, setHemaTests] = useState([])\r\n    const [hemaTestsInput, setHemaTestsInput] = useState(\"\")\r\n    const [cmTests, setCmTests] = useState([])\r\n    const [cmTestsInput, setCmTestsInput] = useState(\"\")\r\n    const [chemTests, setChemTests] = useState([])\r\n    const [chemTestsInput, setChemTestsInput] = useState(\"\")\r\n    const [seroTests, setSeroTests] = useState([])\r\n    const [seroTestsInput, setSeroTestsInput] = useState(\"\")\r\n    const [microTests, setMicroTests] = useState([])\r\n    const [microTestsInput, setMicroTestsInput] = useState(\"\")\r\n\r\n    let { pId } = useParams();\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:3001/test\").then((response) => {\r\n            setTestData(response.data);\r\n        })\r\n\r\n        axios.get(\"http://localhost:3001/order\").then((response) => {\r\n            setLastOrderIdData(response.data);\r\n\r\n        })\r\n\r\n        axios.get(`http://localhost:3001/patient/findpatientById/${pId}`).then((response) => {\r\n            setPtData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n\r\n    }, [pId])\r\n\r\n    useEffect(() => {\r\n            const reducedTests = tests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setLabTestInput(reducedTests);\r\n\r\n            const reducedChemTests = chemTests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setChemTestsInput(reducedChemTests);  \r\n            \r\n            const reducedCmTests = cmTests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setCmTestsInput(reducedCmTests);\r\n            \r\n            const reducedSeroTests = seroTests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setSeroTestsInput(reducedSeroTests);\r\n            \r\n            const reducedHemaTests = hemaTests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setHemaTestsInput(reducedHemaTests);\r\n            \r\n            const reducedMicroTests = microTests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n            setMicroTestsInput(reducedMicroTests);  \r\n\r\n    }, [tests, chemTests, cmTests, seroTests, microTests, hemaTests])\r\n\r\n\r\n\r\n    const submitHandler = () => {\r\n        // Reduce array for test input\r\n        const reducedTests = tests.reduce((acc, curr) => `${acc}${curr.testcode} `, '');\r\n        setLabTestInput(reducedTests);\r\n\r\n        //Set Lab No \r\n        let year = new Date().getFullYear();\r\n        let month = new Date().getMonth();\r\n\r\n        const branchcode = \"CAM\";\r\n        let id = lastOrderIdData.id+1;\r\n\r\n        let concatLabNo = `${branchcode}-${year}-${month+1}-${id}`\r\n        setLabNumberInput(concatLabNo);\r\n    \r\n    }\r\n\r\n    const onSubmit = async (data) => {\r\n     if(labTestInput.length === 0){\r\n         alert(\"Please add test!\")\r\n     }else{\r\n\r\n        await axios.get(\"http://localhost:3001/order\").then((response) => {\r\n            setLastOrderIdData(response.data);\r\n            //Set Lab No \r\n            let year = new Date().getFullYear();\r\n            let month = new Date().getMonth();\r\n\r\n            const branchcode = \"CAM\";\r\n            let id = lastOrderIdData.id+1;\r\n\r\n            let concatLabNo = `${branchcode}-${year}-${month+1}-${id}`\r\n            data.labNumber = concatLabNo;\r\n        })\r\n\r\n        setIsLoading(true);\r\n        data.forPtId = ptData.id;\r\n        data.testsRequested = labTestInput;\r\n\r\n        //Check if sections are null\r\n\r\n        axios.post(\"http://localhost:3001/order/addorder\", data,\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\")\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert('You are not logged in, please log-in!');\r\n                history.push('/login');\r\n            }else{\r\n\r\n                if(cmTestsInput){\r\n                    axios.post(\"http://localhost:3001/order/addsord\",\r\n                        {\r\n                            section: \"CM\",\r\n                            tests: cmTestsInput,\r\n                            forOrderID: lastOrderIdData.id+1,\r\n                            sectNumber: `(CM)-${labNumberInput}`\r\n                        },\r\n                    {\r\n                        headers: {\r\n                            accessToken: localStorage.getItem(\"accessToken\")\r\n                        }\r\n                    }).then((response) => {\r\n                        if(response.data.error){\r\n                            alert('You are not logged in, please log-in!');\r\n                            history.push('/login');\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n                if(chemTestsInput){\r\n                    axios.post(\"http://localhost:3001/order/addsord\",\r\n                    {\r\n                        section: \"Chemistry\",\r\n                        tests: chemTestsInput,\r\n                        forOrderID: lastOrderIdData.id+1,\r\n                        sectNumber: `(CHEM)-${labNumberInput}`\r\n                    },\r\n                {\r\n                    headers: {\r\n                        accessToken: localStorage.getItem(\"accessToken\")\r\n                    }\r\n                }).then((response) => {\r\n                    if(response.data.error){\r\n                        alert('You are not logged in, please log-in!');\r\n                        history.push('/login');\r\n                    }\r\n                })\r\n                }\r\n\r\n\r\n                if(hemaTestsInput){\r\n                    axios.post(\"http://localhost:3001/order/addsord\",\r\n                    {\r\n                        section: \"Hematology\",\r\n                        tests: hemaTestsInput,\r\n                        forOrderID: lastOrderIdData.id+1,\r\n                        sectNumber: `(HEMA)-${labNumberInput}`\r\n                    },\r\n                {\r\n                    headers: {\r\n                        accessToken: localStorage.getItem(\"accessToken\")\r\n                    }\r\n                }).then((response) => {\r\n                    if(response.data.error){\r\n                        alert('You are not logged in, please log-in!');\r\n                        history.push('/login');\r\n                    }\r\n                })\r\n                }\r\n\r\n\r\n                if(seroTestsInput){\r\n                    axios.post(\"http://localhost:3001/order/addsord\",\r\n                    {\r\n                        section: \"Serology\",\r\n                        tests: seroTestsInput,\r\n                        forOrderID: lastOrderIdData.id+1,\r\n                        sectNumber: `(SERO)-${labNumberInput}`\r\n                    },\r\n                {\r\n                    headers: {\r\n                        accessToken: localStorage.getItem(\"accessToken\")\r\n                    }\r\n                }).then((response) => {\r\n                    if(response.data.error){\r\n                        alert('You are not logged in, please log-in!');\r\n                        history.push('/login');\r\n                    }\r\n                })\r\n                }\r\n\r\n\r\n                if(microTestsInput){\r\n                    axios.post(\"http://localhost:3001/order/addsord\",\r\n                    {\r\n                        section: \"Micro\",\r\n                        tests: microTestsInput,\r\n                        forOrderID: lastOrderIdData.id+1,\r\n                        sectNumber: `(MICRO)-${labNumberInput}`\r\n                    },\r\n                {\r\n                    headers: {\r\n                        accessToken: localStorage.getItem(\"accessToken\")\r\n                    }\r\n                }).then((response) => {\r\n                    if(response.data.error){\r\n                        alert('You are not logged in, please log-in!');\r\n                        history.push('/login');\r\n                    }\r\n                })\r\n                }\r\n\r\n\r\n                axios.post(\"http://localhost:3001/order/cnxtion\",\r\n                    {\r\n                        OrderId: lastOrderIdData.id+1,\r\n                        PatientlistId: ptData.id\r\n                    },\r\n                {\r\n                    headers: {\r\n                        accessToken: localStorage.getItem(\"accessToken\")\r\n                    }\r\n                }).then((response) => {\r\n                    if(response.data.error){\r\n                        alert('You are not logged in, please log-in!');\r\n                        history.push('/login');\r\n                    }\r\n                })\r\n\r\n                history.push('/')\r\n            \r\n            }\r\n        })\r\n     }\r\n    }\r\n\r\n    const showModal = () => {\r\n        setShow(true);\r\n    }\r\n\r\n    const closeModal= () => {\r\n        submitHandler();\r\n        setShow(false);\r\n    }\r\n\r\n\r\n    const initialValues = {\r\n        forPtId: ptData.branchid,\r\n        reqDr:\"\",\r\n        testsRequested:labTestInput,\r\n        labNumber: \"\",\r\n        ptType: \"\",\r\n    }\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        forPtId: Yup.string(),\r\n        reqDr: Yup.string().required(\"This field is required! Put N/A if none\"),\r\n        ptType: Yup.string().required(\"This field is required!\"),\r\n        testsRequested: Yup.string(),\r\n        labNumber: Yup.string(),\r\n\r\n    })\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"ptregwrapper\">\r\n                <LoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n         <div className=\"ptregwrapper\">\r\n            <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\r\n                <Form>\r\n                    <h1>Add Patient Order</h1>\r\n                    <hr />\r\n                    <h4>Patient Information Information</h4>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-content\">\r\n                        <label className=\"form-content\">Patient ID:</label>\r\n                        <input type=\"text\" id=\"form-field\" value={ptData.branchid} disabled={true} />\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"form-group\">\r\n                \r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"lastname\">Lastname:</label> \r\n\r\n                        <input type=\"text\" id=\"form-field\" value={ptData.lastname} disabled />\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"firstname\">First name:</label>\r\n                        \r\n                    <input type=\"text\" id=\"form-field\" value={ptData.firstname} disabled/>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"middlename\">Middle name:</label>\r\n                        \r\n                        <input type=\"text\" id=\"form-field\" value={ptData.middlename} disabled />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" htmlFor=\"gender\">Gender:</label>\r\n                        <input type=\"text\" id=\"form-field\" value={ptData.gender} disabled/>\r\n                    </div>\r\n\r\n                    <div className=\"form-content\">\r\n                        <label className=\"form-content\" name=\"age\">Age:</label>\r\n                        \r\n                        <input type=\"text\" id=\"form-field\" value={ptData.age} disabled/>\r\n                        \r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <br /><h4>Request Information</h4>\r\n                    <div className=\"form-group\">\r\n\r\n                        <div className=\"form-content addressdiv\">\r\n                        <label className=\"form-content\" htmlFor=\"reqDr\">Requesting Physician:</label>\r\n                        <Field \r\n                            name=\"reqDr\"\r\n                            id=\"form-field\"\r\n                            type=\"text\"\r\n                            placeholder=\"Requesting Physician\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <ErrorMessage name=\"reqDr\" component=\"span\" />\r\n\r\n                        </div>\r\n\r\n                        <div className=\"form-content addressdiv\">\r\n                        <label className=\"form-content\" htmlFor=\"reqDr\">Patient Type:</label>\r\n                        <Field \r\n                            name=\"ptType\"\r\n                            id=\"form-field\"\r\n                            type=\"text\"\r\n                            placeholder=\"OPD / Room No.\"\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <ErrorMessage name=\"ptType\" component=\"span\" />\r\n\r\n                        </div>\r\n\r\n                        <div className=\"form-content\">\r\n                            <Field \r\n                                name=\"testsRequested\"\r\n                                id=\"form-field\"\r\n                                type=\"text\"\r\n                                placeholder=\"Test Requested\"\r\n                                hidden={true}\r\n                                value={labTestInput}\r\n                                disabled={false}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <div className=\"form-content\">\r\n                            <Field \r\n                                name=\"labNumber\"\r\n                                id=\"form-field\"\r\n                                type=\"text\"\r\n                                placeholder=\"Lab No.\"\r\n                                hidden={true}\r\n                                disabled={false}\r\n                                value={labNumberInput}\r\n                            />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    <br />\r\n                    <table className=\"table width50\">\r\n                        <tbody>\r\n                            <tr className=\"header\">\r\n                                <td>Requested Test/s</td>\r\n                                <td>Action</td>\r\n                            </tr>\r\n                            {tests.map((test) => {\r\n                                return (\r\n                                    <Testrow\r\n                                        setTests={setTests}\r\n                                        tests={tests}\r\n                                        key={test.index}\r\n                                        test={test}\r\n                                        submitHandler={submitHandler}\r\n                                        setLabTestInput={setLabTestInput}\r\n                                        setHemaTests={setHemaTests}\r\n                                        setCmTests={setCmTests}\r\n                                        setChemTests={setChemTests}\r\n                                        setSeroTests={setSeroTests}\r\n                                        setMicroTests={setMicroTests}\r\n                                        hemaTests={hemaTests}\r\n                                        cmTests={cmTests}\r\n                                        chemTests={chemTests}\r\n                                        seroTests={seroTests}\r\n                                        microTests={microTests}\r\n                                    />\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <td className=\"select\" onClick={showModal}>Click here to add test</td>\r\n                                <td></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <button className=\"form-content form-botton\" type=\"submit\">Submit</button>\r\n                    <Addordermodal \r\n                        show={show}\r\n                        tests={testData}\r\n                        close={closeModal}\r\n                        testlist={tests}\r\n                        setTestsList={setTests}\r\n                        hemaTests={hemaTests}\r\n                        setHemaTests={setHemaTests}\r\n                        cmTests={cmTests}\r\n                        setCmTests={setCmTests}\r\n                        chemTests={chemTests}\r\n                        seroTests={seroTests}\r\n                        setSeroTests={setSeroTests}\r\n                        microTests={microTests}\r\n                        setMicroTests={setMicroTests}\r\n                        setChemTests={setChemTests}\r\n                    />\r\n\r\n                </Form>\r\n            </Formik>\r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addorder\r\n","import React from 'react'\r\nimport { useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../helpers/AuthContext';\r\n\r\n\r\nimport './users.css'\r\n\r\nfunction UserLogin() {\r\n    let history = useHistory();\r\n    const [username, setUsername] = useState(\"\");\r\n    const[password, setPassword] = useState(\"\");\r\n    const[msg, setMsg] = useState(\"\");\r\n    const {setAuthState} = useContext(AuthContext);\r\n\r\n    const onSubmit = () => {\r\n        const data = { username, password }\r\n        \r\n        axios.post(\"http://localhost:3001/auth/login\", data).then((response) => {\r\n\r\n            if(response.data.msg){\r\n                setMsg(response.data.msg);\r\n            }else{\r\n                localStorage.setItem(\"accessToken\", response.data);\r\n                setAuthState(prevAuthState => {\r\n                    return { ...prevAuthState, status: true}\r\n                  })\r\n                history.push('/');\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"login-form-wrapper\">\r\n            <div className=\"form-wrapper\">\r\n                <div className=\"login-form\">\r\n                    <h1>Logo</h1>\r\n                    <h3>Login</h3>\r\n                    <form>\r\n                        \r\n                    <p className=\"errormsg\">{msg}</p>\r\n                        <label >Username:</label><br />\r\n                        <input \r\n                            type=\"text\" \r\n                            id=\"form-field\"\r\n                            placeholder=\"Username\"\r\n                            onChange={(event) => setUsername(event.target.value)}\r\n                        />\r\n                        <br />\r\n                        <label>Password:</label><br />\r\n                        <input \r\n                            type=\"password\" \r\n                            id=\"form-field\"\r\n                            placeholder=\"Password\"\r\n                            onChange={(event) => setPassword(event.target.value)}\r\n                        />\r\n                        <br />\r\n                        <input onClick={onSubmit} className=\"login-form-botton\" type=\"button\" value=\"Login\" />\r\n                    </form>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserLogin\r\n","import React from 'react'\r\n\r\nimport './users.css'\r\n\r\nfunction UserReg() {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            Register\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserReg\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport Moment from 'moment';\r\n\r\n\r\nfunction Ordersrow(props) {\r\n\r\n    let history = useHistory();\r\n\r\n    const onSelect = () => {\r\n        history.push(`/order/${props.order.labNumber}`)\r\n\r\n    }\r\n    return (\r\n        <tr className=\"tbcontent order\">\r\n            <td>{props.order.labNumber}</td>\r\n            <td>{props.order.Patientlists[0].lastname}, {props.order.Patientlists[0].firstname} {props.order.Patientlists[0].middlename}</td>\r\n            <td>{props.order.testsRequested}</td>\r\n            <td>{Moment(props.order.createdAt).format('MMMM DD, yyyy')}</td>\r\n            <td onClick={onSelect}>Select</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Ordersrow\r\n","import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport NotLoggedInModal from '../NotLoggedInModal'\r\nimport Ordersrow from './Ordersrow'\r\nimport ReactPaginate from 'react-paginate'\r\nimport '../../components/ptregistration/ptreg.css'\r\nimport LoadingModal from '../LoadingModal'\r\nimport { useState } from 'react'\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nfunction Orders() {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [orders, setOrders] = useState([])\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 10;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(orders.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = orders.slice(pagesVisited, pagesVisited + orderPerPage).map((order) => {\r\n        return (<Ordersrow key={order.id} order={order} />)\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/getorders`).then((response) => {\r\n            setOrders(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[])\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsLoading(true)\r\n\r\n        await axios.post(`http://localhost:3001/order/filter`, data).then((response) => {\r\n            if(response.data.length === 0){\r\n                alert('Lab number not found!')\r\n                setIsLoading(false);\r\n            }\r\n\r\n            if(response.data[0].status === \"DELETED\"){\r\n                alert(\"That lab number is deleted!\")\r\n            }else{\r\n                setOrders(response.data);\r\n            }\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"ptregwrapper\">\r\n                <LoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"labwrapper\">\r\n            <h1 className=\"labcontentheader-results\">&nbsp; Orders</h1>\r\n            <div className=\"labdiv\">\r\n                <div className=\"labdivcontent\">\r\n                <div className=\"form-content\">\r\n                    <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                        <Form  className=\"margin-0\">\r\n                            <label className=\"form-content filter-label\">Search lab number:</label>\r\n                            <Field \r\n                                    name=\"labNumber\"\r\n                                    id=\"form-field\"\r\n                                    type=\"text\"\r\n                                    placeholder = \"Enter lab no...\"\r\n                                    className=\"margin-0\"\r\n                            />\r\n                            <button className=\"form-botton\" type=\"submit\">Search</button>\r\n                        </Form> \r\n                    </Formik>\r\n                </div>\r\n                <br />\r\n\r\n                    <table className=\"tablelab\" id=\"ordertable\">\r\n                        <tbody>\r\n                            <tr className=\"header\">\r\n                                <th>Lab Number</th>\r\n                                <th>Patient Name</th>\r\n                                <th>Test/s Requested</th>\r\n                                <th>Date Encoded</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n\r\n                           {displayOrders}\r\n                        </tbody>\r\n                    </table>\r\n                    <br />\r\n                    {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <NotLoggedInModal /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Orders\r\n","export default __webpack_public_path__ + \"static/media/arialbd.64dde1b4.ttf\";","import React from 'react'\r\nimport { Page, Image, Text, View, Document, StyleSheet, Font } from '@react-pdf/renderer';\r\nimport Moment from 'moment'\r\nimport arialbd from '../../fonts/arialbd.ttf'\r\nimport logo from '../../images/stcamlogo.jpg'\r\nFont.register({ family: 'arialbd', src: arialbd, fontStyle: 'normal', fontWeight: 'bold' });\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    paddingTop: 15,\r\n    paddingBottom: 100,\r\n    paddingHorizontal: 35,\r\n    alignItems: 'center'\r\n  },\r\nheader:{\r\n    width: 575.28,\r\n    height: 100\r\n  },\r\n  wrap:{\r\n    width: 575.28,\r\n  },\r\ncompanyHeader:{\r\n    width: 575.28,\r\n  },\r\n  companyHText:{\r\n    fontSize: '16px',\r\n    textAlign: 'center'\r\n  },\r\n  contactText:{\r\n    textAlign: 'center',\r\n    fontSize: '8px'\r\n  },\r\n  marginTop:{\r\n    marginTop: 2,\r\n  },\r\n  patientHeader:{\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    width: 575.28,\r\n    paddingLeft: '10px',\r\n  },\r\n  pcol:{\r\n    width: 350,\r\n  },\r\n  pcol1:{\r\n    width: 200,\r\n  },\r\n  patientInfoText:{\r\n    fontSize: '10px',\r\n  },\r\n  resultBody:{\r\n    width: 575.28,\r\n    paddingLeft: '10px',\r\n  },\r\n  resultHeader:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '11px',\r\n    fontWeight: \"bold\",\r\n    width: 575.28\r\n  },\r\n  footer:{\r\n    width: 575.28,\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    position: 'absolute',\r\n    bottom: 29\r\n  },\r\n  footerCol:{\r\n    width: 200,\r\n  },\r\n  footerCol1:{\r\n    width: 200,\r\n    height: 30,\r\n  },\r\n  footerText:{\r\n    fontSize: '9px',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  footerMessage:{\r\n    position: 'absolute',\r\n    fontSize: '9px',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    bottom: 29,\r\n  },\r\n  resTable:{\r\n    width: 555.28,\r\n  },\r\n  resHText:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '10px',\r\n    fontWeight: 'bold',\r\n    width: 130,\r\n    textAlign: 'center',\r\n    borderBottom: '1px dotted black',\r\n    borderTop: '1px dotted black',\r\n    padding: 5\r\n  },\r\n  testNameHeader:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '10px',\r\n    fontWeight: 'bold',\r\n    width: 170,\r\n    textAlign: 'center',\r\n    borderBottom: '1px dotted black',\r\n    borderTop: '1px dotted black',\r\n    padding: 5\r\n  },\r\n  tableHeader:{\r\n    width: 560.28,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  resTr:{\r\n    width: 560.28,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n   body:{\r\n    paddingTop: 35,\r\n    paddingBottom: 65,\r\n    paddingHorizontal: 35,\r\n},\r\ntestName:{\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 170,\r\n  padding: 2\r\n},\r\ntrCenter:{\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 130,\r\n  padding: 2,\r\n  textAlign: 'center',\r\n},\r\ntrCenterBold:{\r\n  fontFamily: 'arialbd',\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 130,\r\n  padding: 2,\r\n  textAlign: 'center',\r\n},\r\nlogo:{\r\n  width: \"55px\",\r\n  position: 'absolute',\r\n  left: \"80px\"\r\n},\r\nsignature:{\r\n  position: 'absolute',\r\n  left: \"0px\",\r\n  width: \"200px\",\r\n  bottom: \"30px\",\r\n  height: \"30px\",\r\n  border: \"2px red solid\"\r\n}\r\n});\r\n\r\n// Create Document Component\r\nconst ResultForm = (props) => {\r\n  return(\r\n  <Document>\r\n    <Page size=\"A5\" orientation= \"landscape\" style={styles.page}>\r\n      <View style={styles.wrap}>\r\n        <View fixed={true} style={styles.header}>\r\n          <View style={styles.companyHeader}>\r\n            <Image src={logo} style={styles.logo} fixed={true}/>\r\n            <Text style={styles.companyHText}>St. Camillus De Lellis General Hospital</Text>\r\n            <Text style={styles.companyHText}>Laboratory Department</Text>\r\n            <Text style={styles.contactText}>Telephone No.: 600-1125  |  e-mail: st.camillusdelellislab@yahoo.com</Text>\r\n            <Text style={[styles.companyHText, styles.marginTop]}>Laboratory Report</Text>\r\n          </View>\r\n          <View style={styles.patientHeader}>\r\n            <View style={styles.pcol}>\r\n              <Text style={styles.patientInfoText}>Patient Name: {props.data.Patientlists[0].lastname}, {props.data.Patientlists[0].firstname} {props.data.Patientlists[0].middlename}</Text>\r\n              <Text style={styles.patientInfoText}>Age/Gender: {props.data.Patientlists[0].age} / {props.data.Patientlists[0].gender}</Text>\r\n              <Text style={styles.patientInfoText}>Requesting Physician: {props.data.reqDr}</Text>\r\n            </View>\r\n\r\n            <View style={styles.pcol1}>\r\n              <Text style={styles.patientInfoText}>Date: {Moment(props.data.createdAt).format('MMMM DD, yyyy')}</Text>\r\n              <Text style={styles.patientInfoText}>Paitent Type/Room: {props.data.ptType}</Text>\r\n              <Text style={styles.patientInfoText}>Laboratory Number: {props.data.labNumber}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.resultBody}>\r\n          <Text fixed={true} style={styles.resultHeader}>Section</Text>\r\n          \r\n          <View style={styles.resTable}>\r\n            \r\n            <View style={styles.tableHeader} fixed={true}>\r\n                <Text style={styles.testNameHeader}>Test Name</Text>\r\n                <Text style={styles.resHText}>Result</Text>\r\n                <Text style={styles.resHText}>Unit</Text>\r\n                <Text style={styles.resHText}>Reference</Text>\r\n            </View>\r\n            {props.data.Sectionorders[0].Sectionresults.map((result, index) => {\r\n                return(\r\n                    <View key={index}>\r\n                    {result.result === \"!\" || result.result === null ?  <View></View> : <View wrap={false} style={styles.resTr}>\r\n                     {result.Testslist.isPackage === true && <Text style={styles.trCenterBold}>{result.Testslist.testname}</Text>}\r\n                     {result.Testslist.isPackage === false && <Text style={styles.testName}>{result.Testslist.testname}</Text>}\r\n                    <Text style={styles.trCenter}>{result.result}</Text>\r\n                    {result.Testslist.isPackage === true && <Text style={styles.trCenter}></Text>}\r\n                    {result.Testslist.isPackage === false && <Text style={styles.trCenter}>{result.Testslist.unit}</Text>}\r\n                    {result.Testslist.Referencevalue == null &&  <Text style={styles.trCenter}></Text>}\r\n                    {result.Testslist.Referencevalue !== null && props.data.Patientlists[0].gender === \"Male\" && <Text style={styles.trCenter}>{result.Testslist.Referencevalue.Male}</Text>}\r\n                    {result.Testslist.Referencevalue !== null && props.data.Patientlists[0].gender === \"Female\" && <Text style={styles.trCenter}>{result.Testslist.Referencevalue.Female}</Text>}\r\n                </View>}\r\n                    </View>)\r\n            })}\r\n\r\n          </View>\r\n          \r\n        </View>\r\n      \r\n      \r\n      \r\n      \r\n        </View>\r\n        <Text fixed={true} style={styles.footerMessage}>** Results are electronically printed. Physical signature is not necessary. **</Text>\r\n        <View fixed={true} style={styles.footer}>\r\n          <View style={styles.footerCol}>\r\n            {/* IMAGE HERE FOR RMT */}\r\n            <Image src={require(`../../images/${props.data.Sectionorders[0].releasedBy}.jpg`).default} style={styles.signature} fixed={true}/>\r\n            <Text style={styles.footerText}>REGISTERED MEDICAL TECHNOLOGIST</Text>\r\n          </View>\r\n\r\n          <View style={styles.footerCol1}>\r\n            {/* IMAGE HERE FOR PATHO SIG */}\r\n            <Image src={require(`../../images/${props.data.Sectionorders[0].pathologist}.jpg`).default} style={styles.signature} fixed={true}/>\r\n          <Text style={styles.footerText}>PATHOLOGIST</Text>\r\n          </View>\r\n        </View>\r\n    </Page>\r\n      \r\n  </Document>\r\n)\r\n};\r\n\r\nexport default ResultForm;\r\n","import React from 'react'\r\nimport { Page, Image, Text, View, Document, StyleSheet, Font } from '@react-pdf/renderer';\r\nimport Moment from 'moment'\r\nimport arialbd from '../../fonts/arialbd.ttf'\r\n\r\nimport logo from '../../images/stcamlogo.jpg'\r\n\r\n\r\nFont.register({ family: 'arialbd', src: arialbd, fontStyle: 'normal', fontWeight: 'bold' });\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    paddingTop: 15,\r\n    paddingBottom: 100,\r\n    paddingHorizontal: 35,\r\n    alignItems: 'center'\r\n  },\r\nheader:{\r\n    width: 575.28,\r\n    height: 120,\r\n    marginBottom: \"5px\"\r\n  },\r\n  wrap:{\r\n    width: 575.28,\r\n  },\r\ncompanyHeader:{\r\n    width: 575.28,\r\n    marginBottom: \"10px\"\r\n  },\r\n  companyHText:{\r\n    fontSize: '16px',\r\n    textAlign: 'center'\r\n  },\r\n  contactText:{\r\n    textAlign: 'center',\r\n    fontSize: '8px'\r\n  },\r\n  marginTop:{\r\n    marginTop: 2,\r\n  },\r\n  patientHeader:{\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    width: 575.28,\r\n    paddingLeft: '10px',\r\n  },\r\n  pcol:{\r\n    width: 350,\r\n  },\r\n  pcol1:{\r\n    width: 200,\r\n  },\r\n  patientInfoText:{\r\n    fontSize: '10px',\r\n  },\r\n  resultBody:{\r\n    width: 575.28,\r\n    paddingLeft: '10px',\r\n  },\r\n  resultHeader:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '11px',\r\n    fontWeight: \"bold\",\r\n    width: 575.28\r\n  },\r\n  footer:{\r\n    width: 575.28,\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    position: 'absolute',\r\n    bottom: 29\r\n  },\r\n  footerCol:{\r\n    width: 200,\r\n  },\r\n  footerCol1:{\r\n    width: 200,\r\n    height: 30,\r\n  },\r\n  footerText:{\r\n    fontSize: '9px',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n  },\r\n  footerMessage:{\r\n    position: 'absolute',\r\n    fontSize: '9px',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    bottom: 29,\r\n  },\r\n  resTable:{\r\n    width: 555.28,\r\n  },\r\n  resHText:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '10px',\r\n    fontWeight: 'bold',\r\n    width: 130,\r\n    textAlign: 'center',\r\n    borderBottom: '1px dotted black',\r\n    borderTop: '1px dotted black',\r\n    padding: 5\r\n  },\r\n  testNameHeader:{\r\n    fontFamily: 'arialbd',\r\n    fontSize: '10px',\r\n    fontWeight: 'bold',\r\n    width: 170,\r\n    textAlign: 'center',\r\n    borderBottom: '1px dotted black',\r\n    borderTop: '1px dotted black',\r\n    padding: 5\r\n  },\r\n  tableHeader:{\r\n    width: 560.28,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n  },\r\n  resTr:{\r\n    width: 560.28,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: \"2px\",\r\n    marginBottom: \"2px\"\r\n  },\r\n   body:{\r\n    paddingTop: 35,\r\n    paddingBottom: 65,\r\n    paddingHorizontal: 35,\r\n},\r\ntestName:{\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 170,\r\n  padding: 2\r\n},\r\ntrCenter:{\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 130,\r\n  padding: 2,\r\n  textAlign: 'center',\r\n},\r\ntrCenterBold:{\r\n  fontFamily: 'arialbd',\r\n  fontSize: '10px',\r\n  fontWeight: 'bold',\r\n  width: 130,\r\n  padding: 2,\r\n  textAlign: 'center',\r\n},\r\nlogo:{\r\n  width: \"55px\",\r\n  position: 'absolute',\r\n  left: \"80px\"\r\n},\r\nsignature:{\r\n  position: 'absolute',\r\n  left: \"0px\",\r\n  width: \"200px\",\r\n  bottom: \"30px\",\r\n  height: \"30px\",\r\n  border: \"2px red solid\"\r\n}\r\n});\r\n\r\n// Create Document Component\r\nconst ResultFormA4 = (props) => {\r\n  return(\r\n  <Document>\r\n    <Page size=\"A4\" orientation= \"portrait\" style={styles.page}>\r\n      <View style={styles.wrap}>\r\n        <View fixed={true} style={styles.header}>\r\n          <View style={styles.companyHeader}>\r\n            <Image src={logo} style={styles.logo} fixed={true}/>\r\n            <Text style={styles.companyHText}>St. Camillus De Lellis General Hospital</Text>\r\n            <Text style={styles.companyHText}>Laboratory Department</Text>\r\n            <Text style={styles.contactText}>Telephone No.: 600-1125  |  e-mail: st.camillusdelellislab@yahoo.com</Text>\r\n            <Text style={[styles.companyHText, styles.marginTop]}>Laboratory Report</Text>\r\n          </View>\r\n          <View style={styles.patientHeader}>\r\n            <View style={styles.pcol}>\r\n              <Text style={styles.patientInfoText}>Patient Name: {props.data.Patientlists[0].lastname}, {props.data.Patientlists[0].firstname} {props.data.Patientlists[0].middlename}</Text>\r\n              <Text style={styles.patientInfoText}>Age/Gender: {props.data.Patientlists[0].age} / {props.data.Patientlists[0].gender}</Text>\r\n              <Text style={styles.patientInfoText}>Requesting Physician: {props.data.reqDr}</Text>\r\n            </View>\r\n\r\n            <View style={styles.pcol1}>\r\n              <Text style={styles.patientInfoText}>Date: {Moment(props.data.createdAt).format('MMMM DD, yyyy')}</Text>\r\n              <Text style={styles.patientInfoText}>Paitent Type/Room: {props.data.ptType}</Text>\r\n              <Text style={styles.patientInfoText}>Laboratory Number: {props.data.labNumber}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n\r\n        <View style={styles.resultBody}>\r\n          <Text fixed={true} style={styles.resultHeader}>Section</Text>\r\n          \r\n          <View style={styles.resTable}>\r\n            \r\n            <View style={styles.tableHeader} fixed={true}>\r\n                <Text style={styles.testNameHeader}>Test Name</Text>\r\n                <Text style={styles.resHText}>Result</Text>\r\n                <Text style={styles.resHText}>Unit</Text>\r\n                <Text style={styles.resHText}>Reference</Text>\r\n            </View>\r\n            {props.data.Sectionorders[0].Sectionresults.map((result, index) => {\r\n                return(\r\n                    <View key={index}>\r\n                    {result.result === \"!\" || result.result === null ?  <View></View> : <View wrap={false} style={styles.resTr}>\r\n                     {result.Testslist.isPackage === true && <Text style={styles.trCenterBold}>{result.Testslist.testname}</Text>}\r\n                     {result.Testslist.isPackage === false && <Text style={styles.testName}>{result.Testslist.testname}</Text>}\r\n                    <Text style={styles.trCenter}>{result.result}</Text>\r\n                    {result.Testslist.isPackage === true && <Text style={styles.trCenter}></Text>}\r\n                    {result.Testslist.isPackage === false && <Text style={styles.trCenter}>{result.Testslist.unit}</Text>}\r\n                    {result.Testslist.Referencevalue == null &&  <Text style={styles.trCenter}></Text>}\r\n                    {result.Testslist.Referencevalue !== null && props.data.Patientlists[0].gender === \"Male\" && <Text style={styles.trCenter}>{result.Testslist.Referencevalue.Male}</Text>}\r\n                    {result.Testslist.Referencevalue !== null && props.data.Patientlists[0].gender === \"Female\" && <Text style={styles.trCenter}>{result.Testslist.Referencevalue.Female}</Text>}\r\n                </View>}\r\n                    </View>)\r\n            })}\r\n\r\n          </View>\r\n          \r\n        </View>\r\n      \r\n      \r\n      \r\n      \r\n        </View>\r\n        <Text fixed={true} style={styles.footerMessage}>** Results are electronically printed. Physical signature is not necessary. **</Text>\r\n        <View fixed={true} style={styles.footer}>\r\n          <View style={styles.footerCol}>\r\n            {/* IMAGE HERE FOR RMT */}\r\n            <Image src={require(`../../images/${props.data.Sectionorders[0].releasedBy}.jpg`).default} style={styles.signature} fixed={true}/>\r\n            <Text style={styles.footerText}>REGISTERED MEDICAL TECHNOLOGIST</Text>\r\n          </View>\r\n\r\n          <View style={styles.footerCol1}>\r\n            {/* IMAGE HERE FOR PATHO SIG */}\r\n            <Image src={require(`../../images/${props.data.Sectionorders[0].pathologist}.jpg`).default} style={styles.signature} fixed={true}/>\r\n          <Text style={styles.footerText}>PATHOLOGIST</Text>\r\n          </View>\r\n        </View>\r\n    </Page>\r\n      \r\n  </Document>\r\n)\r\n};\r\n\r\nexport default ResultFormA4;\r\n","import React from 'react'\r\nimport { PDFDownloadLink } from '@react-pdf/renderer'\r\nimport ResultForm from '../results/ResultForm'\r\nimport ResultFormA4 from '../results/ResultFormA4'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport '../laboratory/checkin/checkinmodal.css'\r\n\r\nfunction Selectsize(props) {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [resultData, setResultData] = useState([])\r\n\r\n    useEffect(()=> {\r\n            axios.get(`http://localhost:3001/order/results/${props.forOrderID}/${props.section}`).then((response) => {\r\n            setResultData(response.data)\r\n            setIsLoading(false)\r\n        })\r\n    }, [props.forOrderID, props.sectionserve])\r\n\r\n\r\n    if(props.show === false){\r\n        return null\r\n\r\n    }else{\r\n        if(isLoading === true){\r\n            return(<div>Loading</div>)\r\n        }else{\r\n            return (\r\n                <div className=\"checkin-modal\">\r\n                    <div className=\"login-modal-wrapper\">\r\n                        <div className=\"loading-modal-header\">\r\n                            <div><strong>&nbsp;</strong></div>\r\n                            <div className=\"checkin-closebtn\" onClick={()=>{props.setShow(false)}}>X</div>\r\n                        </div>\r\n                            <div className=\"checkin-modal-body\">\r\n                               <strong>Please select paper size</strong><br />\r\n                                \r\n                               <PDFDownloadLink\r\n                                document={<ResultForm data={resultData[0]} />}\r\n                                fileName={`${props.detail.sectNumber}`}\r\n                                className=\"size-btn\"\r\n                                >\r\n                                  {({ blob, url, loading, error }) =>\r\n                                    loading ? 'Loading...' : 'A5 (half)'\r\n                                }\r\n                                </PDFDownloadLink>\r\n    \r\n                                <PDFDownloadLink\r\n                                document={<ResultFormA4 data={resultData[0]}/>}\r\n                                fileName={`${props.detail.sectNumber}`}\r\n                                className=\"size-btn\"\r\n                                data={resultData[0]}\r\n                                >\r\n                                   {({ blob, url, loading, error }) =>\r\n                                    loading ? 'Loading...' : 'A4 (whole)'\r\n                                }\r\n                                </PDFDownloadLink>\r\n                            </div>\r\n                        <div className=\"checkin-modal-footer\">\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Selectsize\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport LoadingModal from '../LoadingModal'\r\nimport Selectsize from './Selectsize'\r\n\r\nfunction DetailTr({detail}) {\r\n\r\n    const [isLoading] = useState(false)\r\n    const [modalShow, setModalShow] = useState(false)\r\n\r\n    const onGenerate = () => {\r\n        setModalShow(true)\r\n    }\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"ptregwrapper\">\r\n                <LoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <tr>\r\n            <td>{detail.sectNumber}</td>\r\n            <td>{detail.status}</td>\r\n            <td>\r\n                  <Selectsize show={modalShow} setShow={setModalShow} detail={detail} forOrderID={detail.forOrderID} section={detail.section}/>\r\n                {detail.status === \"RELEASED\" && <button className=\"checkin-btn accept\" onClick={onGenerate}>Generate Report</button>}\r\n          \r\n                {detail.status !== \"RELEASED\"  && <button className=\"checkin-btn-disabled\" disabled={true} onClick={onGenerate}>Generate Report</button>}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default DetailTr\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport '../../components/ptregistration/ptreg.css'\r\nimport './orderdetails.css'\r\nimport DetailTr from './DetailTr'\r\n\r\n\r\nfunction OrderDetails() {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [orderDetails, setOrderDetails] = useState({})\r\n    let { labNumber } = useParams();\r\n    let history = useHistory();\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/getorder/${labNumber}`, {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            setOrderDetails(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[labNumber])\r\n\r\n    const onOrderDelete =  async () => {\r\n        await axios.post(`http://localhost:3001/order/labno/update`, {\r\n            labNumber: orderDetails[0].labNumber,\r\n            status: \"DELETED\"\r\n        })\r\n        alert(\"Order deleted\");\r\n        history.push('/orders')\r\n    }\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"ptregwrapper\">\r\n            <h3>Loading...</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"labwrapper-orderdeats\">\r\n        <h1 className=\"labcontentheader-orderdeats\">&nbsp; Order Details</h1>\r\n            <div className=\"labdiv\">\r\n                <div className=\"labdivcontent p-10\">\r\n                    <h4 className=\"center\">Lab Number {orderDetails[0].labNumber} </h4>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"divblock p-10\">\r\n                    <strong>Name:</strong> <p className=\"orderdetail\">{orderDetails[0].Patientlists[0].lastname}, {orderDetails[0].Patientlists[0].firstname} {orderDetails[0].Patientlists[0].middlename}</p>\r\n                    </div>\r\n\r\n                    <div className=\"divblock p-10\">\r\n                    <strong>Age/Gender:</strong> <p className=\"orderdetail\">{orderDetails[0].Patientlists[0].age}/{orderDetails[0].Patientlists[0].gender}</p>\r\n                    </div>\r\n\r\n                    <div className=\"divblock p-10\">\r\n                    <strong>Requesting Physician:</strong> <p className=\"orderdetail\">{orderDetails[0].reqDr}</p>\r\n                    </div>\r\n                <div className=\"divblock p-10\">\r\n                    <strong>Test/s Status:</strong>\r\n                </div>\r\n                <div className=\"divblock p-10\">\r\n                <table className=\"detailtable\">\r\n                    <tbody>\r\n                        <tr className=\"header\">\r\n                            <th>Section LabNumber</th>\r\n                            <th>Status</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                        {orderDetails[0].Sectionorders.map((detail, index) => {\r\n                            return (\r\n                                <DetailTr detail={detail} key={index} />\r\n                                )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                </div>\r\n                <br />\r\n                <br />\r\n                <div className=\"divblock p-10\">\r\n                {orderDetails[0].status !== \"RELEASED\" && <button onClick={onOrderDelete} className=\"btn delete\">Delete/Archive</button>}\r\n                </div><br />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderDetails\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction LabNav() {\r\n    return (\r\n        <nav className=\"lab\">\r\n        <li>\r\n            <ul><Link to=\"/\">Reception</Link></ul>\r\n            <ul><Link to=\"/laboratory\">Specimen Check-in</Link></ul>\r\n            <ul><Link to=\"/laboratory/chemistry\">Chemistry</Link></ul>\r\n            <ul><Link to=\"/laboratory/hematology\">Hematology</Link></ul>\r\n            <ul><Link to=\"/laboratory/cm\">Clinical Microscopy</Link></ul>\r\n            <ul><Link to=\"/laboratory/sero\">Serology</Link></ul>\r\n        </li>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default LabNav\r\n","import React from 'react'\r\n\r\nfunction checkInTr({details, setShow, setOrderID}) {\r\n\r\n    const selectHandler = () => {\r\n        setShow(true);\r\n        setOrderID(details.Sectionorders[0].forOrderID);\r\n    }\r\n    return (\r\n        <tr className=\"tbcontent lab rform\">\r\n                <td>{details.labNumber}</td>\r\n                <td>{details.Patientlists[0].lastname}, {details.Patientlists[0].firstname} {details.Patientlists[0].middlename}</td>\r\n                <td>{details.Sectionorders[0].tests}</td>\r\n                <td onClick={selectHandler}>Select</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default checkInTr\r\n","import React from 'react'\r\nimport '../components/laboratory/checkin/checkinmodal.css'\r\nimport loading from '../images/loading.gif'\r\n\r\nfunction LabLoadingModal() {\r\n\r\n    return (\r\n        <div className=\"loading-modal\">\r\n            <div className=\"login-modal-wrapper\">\r\n                <div className=\"checkin-modal-header\">\r\n                    <div><strong>&nbsp;</strong></div>\r\n                </div>\r\n                    <div className=\"loading-modal-body\">\r\n                        <img src={loading} alt=\"loading\" width=\"auto\"  style={{marginRight: \"10px\"}}/>\r\n                       <strong>Loading please wait...</strong><br />\r\n                    </div>\r\n                <div className=\"checkin-modal-footer\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LabLoadingModal\r\n","import React from 'react'\r\nimport './checkinmodal.css'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useState } from 'react'\r\nimport LabLoadingModal from '../../LabLoadingModal';\r\n\r\n\r\nfunction CheckInModal(props) {\r\n\r\n    let history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    \r\n\r\n    if(isLoading === true){\r\n        return (\r\n            <LabLoadingModal />\r\n        )\r\n    }\r\n    const onAccept = async () => {\r\n        setIsLoading(true);\r\n        props.setShow(false);\r\n\r\n        if(props.selected[0].Sectionorders[0].status === \"Sample Rejected - For Check-In\"){\r\n\r\n            await axios.post(\"http://localhost:3001/order/updatesorder\", {\r\n                status: \"RUNNING\",\r\n                sectNumber: props.selected[0].Sectionorders[0].sectNumber\r\n            },\r\n            {\r\n                headers: {\r\n                    accessToken: localStorage.getItem(\"accessToken\")\r\n                }\r\n            }).then((response) => {\r\n                if(response.data.error){\r\n                    alert(\"You are not logged in, please log in!\");\r\n                    history.push(\"/login\");\r\n                }\r\n            })\r\n        }else{\r\n            await axios.post(\"http://localhost:3001/order/updatesorder\", {\r\n            status: \"RUNNING\",\r\n            sectNumber: props.selected[0].Sectionorders[0].sectNumber\r\n        },\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\")\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in, please log in!\");\r\n                history.push(\"/login\");\r\n            }\r\n        })\r\n\r\n        // create result form\r\n        \r\n        const etests = props.selected[0].Sectionorders[0].tests;\r\n        const expTests = etests.split(\" \");\r\n\r\n        expTests.pop();\r\n        for (let i = 0; i < expTests.length; i++){\r\n\r\n            console.log(`${expTests[i]} checked in`);\r\n\r\n            await axios.post(`http://localhost:3001/order/form/result/create/${props.selected[0].Sectionorders[0].id}`, {\r\n            test: expTests[i],\r\n        },\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\")\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in, please log in!\");\r\n                history.push(\"/login\");\r\n            }else{\r\n                console.log(`FrontEND Success ${expTests[i]}`)\r\n\r\n            }\r\n        })\r\n        // Chemistry Profiles\r\n        if(expTests[i] === \"LIPID\"){\r\n            const test = [\"CHOLE\",\"TRIG\",\"HDL\",\"LDL\"]\r\n            setTimeout(async () => {\r\n                for(let i=0; i<test.length; i++){\r\n                    await axios.post(`http://localhost:3001/order/form/result/create/${props.selected[0].Sectionorders[0].id}`, {\r\n                        test: test[i],\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            accessToken: localStorage.getItem(\"accessToken\")\r\n                        }\r\n                    })  \r\n                }\r\n            }, 500)\r\n        }\r\n\r\n        // CM Profiles\r\n\r\n        // Hema Profiles\r\n        if(expTests[i] === \"CBCPLT\"){\r\n            const test = [\"WBCCT\",\"GRNCT\",\"LYMPCT\",\"MID\",\"RBCCT\",\"HGB\",\"HCT\",\"MCV\",\"MCH\",\"MCHC\",\"PLTCT\"]\r\n            setTimeout(async () => {\r\n                for(let i=0; i<test.length; i++){\r\n                    await axios.post(`http://localhost:3001/order/form/result/create/${props.selected[0].Sectionorders[0].id}`, {\r\n                        test: test[i],\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            accessToken: localStorage.getItem(\"accessToken\")\r\n                        }\r\n                    })  \r\n                }\r\n            }, 500)\r\n        }\r\n        if(expTests[i] === \"Hgb/Hct\"){\r\n            const test = [\"HGB\",\"HCT\"]\r\n            setTimeout(async () => {\r\n                for(let i=0; i<test.length; i++){\r\n                    await axios.post(`http://localhost:3001/order/form/result/create/${props.selected[0].Sectionorders[0].id}`, {\r\n                        test: test[i],\r\n                    },\r\n                    {\r\n                        headers: {\r\n                            accessToken: localStorage.getItem(\"accessToken\")\r\n                        }\r\n                    })  \r\n                }\r\n            }, 500)\r\n        }\r\n\r\n        // Sero Profiles\r\n\r\n        //MircroProfiles\r\n\r\n        }\r\n        }\r\n        await axios.get(`http://localhost:3001/order/forcheckin/${props.section}`).then((response) => {\r\n            props.setCheckInDetails(response.data);\r\n        })\r\n        setTimeout(()=>{setIsLoading(false);}, 1000)\r\n        setIsLoading(false);\r\n    }\r\n\r\n    if(!props.show){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkin-modal\">\r\n            <div className=\"checkin-modal-wrapper\">\r\n                <div className=\"checkin-modal-header\">\r\n                    <div><strong>Specimen Check-in Module:</strong></div>\r\n                    <div className=\"checkin-closebtn\" onClick={props.closeModal}>X</div>\r\n                </div>\r\n                    <div className=\"checkin-modal-body\">\r\n                        <p className=\"order-dits\">\r\n                            <strong>Patient Name:</strong> {props.selected[0].Patientlists[0].lastname}, {props.selected[0].Patientlists[0].firstname} {props.selected[0].Patientlists[0].middlename}<br />\r\n                            <strong>Section:</strong> {props.selected[0].Sectionorders[0].section}<br />\r\n                            <strong>Lab Number:</strong> {props.selected[0].Sectionorders[0].sectNumber}<br />\r\n                            <strong>Test/s:</strong> {props.selected[0].Sectionorders[0].tests}\r\n                        </p>\r\n                    </div>\r\n                <div className=\"checkin-modal-footer\">\r\n                        <input type=\"button\" className=\"checkin-btn accept\" value=\"Accept\" onClick={onAccept}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckInModal\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react'\r\nimport ReactPaginate from 'react-paginate';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './lab.css'\r\nimport Header from '../Header';\r\nimport LabNav from './LabNav';\r\nimport CheckInTr from './checkin/CheckInTr';\r\nimport CheckInModal from './checkin/CheckInModal';\r\nimport NotLoggedInModal from '../NotLoggedInModal';\r\nimport LabLoadingModal from '../LabLoadingModal';\r\n\r\n\r\nfunction LabClient() {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [checkInDetails, setCheckInDetails] = useState([]);\r\n    const [section, setSection] = useState(\"Chemistry\");\r\n    const [show, setShow] = useState(false);\r\n    const [orderid, setOrderID] = useState(0);\r\n    const [orderselected, setSelected] = useState([  {\r\n                                                    \"id\": 3,\r\n                                                    \"reqDr\": \"N/A\",\r\n                                                    \"testsRequested\": \"FBS LIPID CBCPLT URINAL \",\r\n                                                    \"encodedBy\": \"ALVINJOHNEB\",\r\n                                                    \"labNumber\": \"CAM-2021-9-3\",\r\n                                                    \"status\": \"PENDING\",\r\n                                                    \"createdAt\": \"2021-09-05T11:54:30.000Z\",\r\n                                                    \"updatedAt\": \"2021-09-05T11:54:30.000Z\",\r\n                                                    \"forPtId\": 1,\r\n                                                    \"Sectionorders\": [\r\n                                                    {\r\n                                                        \"id\": 4,\r\n                                                        \"sectNumber\": \"(CHEM)-CAM-2021-9-3\",\r\n                                                        \"section\": \"Chemistry\",\r\n                                                        \"tests\": \"FBS LIPID \",\r\n                                                        \"status\": \"FOR CHECK-IN\",\r\n                                                        \"updatedBy\": \"ALVINJOHNEB\",\r\n                                                        \"createdAt\": \"2021-09-05T11:54:30.000Z\",\r\n                                                        \"updatedAt\": \"2021-09-05T11:54:30.000Z\",\r\n                                                        \"forOrderID\": 3\r\n                                                    }\r\n                                                    ],\r\n                                                    \"Patientlists\": [\r\n                                                    {\r\n                                                        \"id\": 1,\r\n                                                        \"branchid\": \"CAMILLUS-1\",\r\n                                                        \"lastname\": \"Bregana\",\r\n                                                        \"firstname\": \"Alvin John\",\r\n                                                        \"middlename\": \"Edra\",\r\n                                                        \"gender\": \"Male\",\r\n                                                        \"bday\": \"1999-10-30\",\r\n                                                        \"age\": 23,\r\n                                                        \"address\": \"Aguitap\",\r\n                                                        \"phone\": \"09997725143\",\r\n                                                        \"idenno\": \"2151607\",\r\n                                                        \"createdAt\": \"2021-09-05T09:46:28.000Z\",\r\n                                                        \"updatedAt\": \"2021-09-05T11:53:37.000Z\",\r\n                                                        \"Orderlist\": {\r\n                                                        \"PatientlistId\": 1,\r\n                                                        \"OrderId\": 3\r\n                                                        }\r\n                                                    }\r\n                                                    ]\r\n                                                }]);\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n    useEffect(() => {\r\n\r\n        axios.get(`http://localhost:3001/order/forcheckin/Chemistry`).then((response) => {\r\n            setCheckInDetails(response.data);\r\n            setSection(\"Chemistry\");\r\n            setIsLoading(false);\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/getorder/id/${orderid}/${section}`).then((response) => {\r\n            if(response.data.length === 1){\r\n             setSelected(response.data);\r\n             setIsLoading(false);\r\n            }\r\n         })\r\n     },[orderid, section])\r\n\r\n\r\n\r\n    const sectionHandler = (e) => {\r\n        const section = e.target.value;\r\n        setSection(section);\r\n\r\n        axios.get(`http://localhost:3001/order/forcheckin/${section}`).then((response) => {\r\n            setCheckInDetails(response.data);\r\n        })\r\n    }\r\n\r\n    const showModal = () =>{\r\n        setShow(true);\r\n    }\r\n\r\n    const closeModal = () =>{\r\n        setShow(false);\r\n    }\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 10;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(checkInDetails.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = checkInDetails.slice(pagesVisited, pagesVisited + orderPerPage).map((details) => {\r\n        return ( <CheckInTr \r\n            details={details} \r\n            key={details.id}\r\n            setShow={setShow} \r\n            setOrderID={setOrderID}\r\n        />)\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n\r\n        await axios.get(`http://localhost:3001/order/forcheckin/Chemistry/${data.labNumber}`).then((response) => {\r\n            if(response.data.length === 0){\r\n                alert('No order found with that lab number!')\r\n            }else{\r\n                setCheckInDetails(response.data);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n               <LabLoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <NotLoggedInModal />\r\n            <Header />\r\n            <LabNav />\r\n              <section>\r\n              <div className=\"ptregwrapper\">\r\n\r\n                <div className=\"labwrapper\">\r\n\r\n                        <h1 className=\"labcontentheader\">Specimen Check-in</h1>\r\n\r\n                        \r\n                        <div className=\"labdiv\">\r\n                            <div className=\"labdivcontent\">\r\n                                <div className=\"form-group space\">\r\n                                    <div className=\"form-content\">\r\n                                        <div className=\"form-content\">\r\n                                            <label className=\"filter-label\">Section:</label><br />\r\n\r\n                                            <select id=\"form-field\" onChange={sectionHandler}>\r\n                                                <option value=\"Chemistry\">Chemistry</option>\r\n                                                <option value=\"Hematology\">Hematology</option>\r\n                                                <option value=\"CM\">Clinical Microscopy</option>\r\n                                                <option value=\"Serology\">Serology</option>\r\n                                            </select>\r\n                                        </div>\r\n                                        \r\n                                        <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                            <Form  className=\"margin-0\">\r\n                                                <label className = \"filter-label\">Filter:</label>\r\n                                                <Field \r\n                                                        name=\"labNumber\"\r\n                                                        id=\"form-field\"\r\n                                                        type=\"text\"\r\n                                                        placeholder = \"Enter lab no...\"\r\n                                                />\r\n                                                <button className=\"form-botton filter\" type=\"submit\">Search</button>\r\n                                            </Form>\r\n                                        </Formik>\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                                <br />\r\n                                <table className=\"tablelab\">\r\n                                    <tbody>\r\n                                        <tr className=\"labheader\">\r\n                                            <th>LabNumber</th>\r\n                                            <th>Client Name</th>\r\n                                            <th>Test/s</th>\r\n                                            <th>Action</th>\r\n                                        </tr>\r\n                                        {displayOrders}\r\n                                    </tbody>\r\n                                </table>\r\n\r\n                            </div>\r\n                            <br />\r\n                                {pageCount > 1 &&\r\n                                    <ReactPaginate\r\n                                    previousLabel = {\"<\"}\r\n                                    nextLabel = {\">\"}\r\n                                    pageCount = {pageCount}\r\n                                    onPageChange={changePage}\r\n                                    containerClassName={\"pagination-bttns\"}\r\n                                    previousLinkClassName={\"prevBttn\"}\r\n                                    nextLinkClassName={\"nextbtn\"}\r\n                                    disabledClassName={\"pgnte-disabled\"}\r\n                                    activeClassName={\"pgninate-active\"}\r\n                                />\r\n                                }\r\n                        </div>\r\n                        \r\n                </div>\r\n             </div>\r\n             <CheckInModal\r\n                show={show}\r\n                showModal={showModal}\r\n                closeModal={closeModal}\r\n                selected={orderselected}\r\n                setShow={setShow}\r\n                section={section}\r\n                setCheckInDetails={setCheckInDetails}\r\n                />\r\n             </section>\r\n              <footer>Laboratory Information System by Bregs</footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LabClient\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nfunction ChemTr({ setPrevResultData, details, setShow, setResultFormData, setSectionResultArray}) {\r\n\r\n    const selectHandler = async () => {\r\n\r\n        await axios.get(`http://localhost:3001/order/resultform/${details.labNumber}/${details.Sectionorders[0].section}`).then((response) => {\r\n        setResultFormData(response.data);\r\n        setSectionResultArray(response.data[0].Sectionorders[0].Sectionresults);\r\n        setShow(true);\r\n        \r\n        axios.get(`http://localhost:3001/order/result/previous/${response.data[0].Patientlists[0].id}/${details.Sectionorders[0].section}`).then((response) => {\r\n            setPrevResultData(response.data)\r\n        })\r\n        })\r\n        \r\n    }\r\n\r\n    return (\r\n        <tr className=\"lab tbcontent\">\r\n                <td>{details.labNumber}</td>\r\n                <td>{details.Patientlists[0].lastname}, {details.Patientlists[0].firstname} {details.Patientlists[0].middlename}</td>\r\n                <td>{details.Sectionorders[0].tests}</td>\r\n                <td onClick={selectHandler}>Select</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ChemTr\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction ChemTest({test, ptdata, status}) {\r\n\r\n    let history = useHistory();\r\n\r\n    const saveResult = async (e) => {\r\n        const result = e.target.value;\r\n        const sResultID = test.id\r\n        \r\n        await axios.post(`http://localhost:3001/order/result/update/${sResultID}/${result}`,{},\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in. Please log-in!\");\r\n                history.push('/login');\r\n            }\r\n        }).catch((err) => {\r\n            console.log(\"Result not updated\");\r\n        })\r\n    }\r\n\r\n\r\n    if(test.Testslist.isPackage){\r\n        return (\r\n\r\n            <tr className=\"rform-header\">\r\n                <td colSpan={4}><strong>{test.Testslist.testname}</strong></td>\r\n            </tr>\r\n\r\n        )\r\n    }else{\r\n        if(ptdata.gender === \"Male\"){\r\n            if(test.isQuali === true){\r\n                const options = test.options.split(',');\r\n                return (\r\n                    <tr className=\"rform\">\r\n                        <td >{test.Testslist.testname}</td>\r\n                        {status === \"RUNNING\" && \r\n                            <td>\r\n                                <select onChange={saveResult}>\r\n                                    <option></option>\r\n                                    {options.map((option, index) => {\r\n                                        if(test.result === option){\r\n                                        return(\r\n                                            <option selected={true} key={index}>{option}</option>\r\n                                            )\r\n                                        }else{\r\n                                            return(<option key={index}>{option}</option>)\r\n                                        }\r\n                                    })}\r\n                                </select>\r\n                            </td>}\r\n                        {status === \"RELEASED\" && <td><input disabled={true} className=\"rform-input\" type=\"text\" value={test.result} /></td>}\r\n                        <td>{test.Testslist.unit}</td>\r\n                        <td>{test.Testslist.Referencevalue.Male}</td>\r\n                    </tr>\r\n            )        \r\n            }else{\r\n                return(\r\n                <tr className=\"rform\">\r\n                    <td >{test.Testslist.testname}</td>\r\n                    {status === \"RUNNING\" && test.isQuali === false && <td><input onBlur={saveResult} className=\"rform-input\" type=\"text\" placeholder={test.result} /></td>}\r\n                    {status === \"RELEASED\" && <td><input disabled={true} className=\"rform-input\" type=\"text\" value={test.result} /></td>}\r\n                    <td>{test.Testslist.unit}</td>\r\n                    <td>{test.Testslist.Referencevalue.Male}</td>\r\n                </tr>                    \r\n                )\r\n            }\r\n        }else{\r\n            if(test.isQuali === true){\r\n                const options = test.options.split(',');\r\n                return (\r\n                    <tr className=\"rform\">\r\n                        <td >{test.Testslist.testname}</td>\r\n                        {status === \"RUNNING\" && \r\n                            <td>\r\n                                <select onChange={saveResult}>\r\n                                    <option></option>\r\n                                    {options.map((option, index) => {\r\n                                        return(<option key={index}>{option}</option>)\r\n                                    })}\r\n                                </select>\r\n                            </td>}\r\n                        {status === \"RELEASED\" && <td><input disabled={true} className=\"rform-input\" type=\"text\" value={test.result} /></td>}\r\n                        <td>{test.Testslist.unit}</td>\r\n                        <td>{test.Testslist.Referencevalue.Male}</td>\r\n                    </tr>\r\n            )        \r\n            }else{\r\n                return(\r\n                <tr className=\"rform\">\r\n                    <td >{test.Testslist.testname}</td>\r\n                    {status === \"RUNNING\" && test.isQuali === false && <td><input onBlur={saveResult} className=\"rform-input\" type=\"text\" placeholder={test.result} /></td>}\r\n                    {status === \"RELEASED\" && <td><input disabled={true} className=\"rform-input\" type=\"text\" value={test.result} /></td>}\r\n                    <td>{test.Testslist.unit}</td>\r\n                    <td>{test.Testslist.Referencevalue.Male}</td>\r\n                </tr>                    \r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ChemTest\r\n","import React from 'react'\r\n\r\nfunction PrevTr({prevResultData, test}) {\r\n\r\n\r\n    if(test.Testslist.isPackage === true){\r\n        return(<tr className=\"rform-header\">\r\n        <td colSpan={4}><strong>{test.Testslist.testname}</strong></td>\r\n    </tr>)\r\n    }else{\r\n        if(prevResultData.Patientlists[0].gender === \"Male\"){\r\n            return (\r\n                <tr className=\"rform\">\r\n                <td >{test.Testslist.testname}</td>\r\n                <td>{test.result}</td>\r\n                <td>{test.Testslist.unit}</td>\r\n                <td>{test.Testslist.Referencevalue.Male}</td>\r\n            </tr>\r\n            )\r\n        }else{\r\n            return (\r\n                <tr className=\"rform\">\r\n                <td >{test.Testslist.testname}</td>\r\n                <td>{test.result}</td>\r\n                <td>{test.Testslist.unit}</td>\r\n                <td>{test.Testslist.Referencevalue.Female}</td>\r\n                </tr>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default PrevTr\r\n","import React from 'react'\r\nimport ReactPaginate from 'react-paginate'\r\nimport { useState } from 'react'\r\nimport Moment from 'moment'\r\nimport PrevTr from './PrevTr'\r\n\r\nfunction PrevResultModal({showPrevResModal, setShowPrevResModal, prevResultData}) {\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const resultPerPage = 1;\r\n    const pagesVisited = pageNumber * resultPerPage\r\n    const pageCount = Math.ceil(prevResultData.length / resultPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayPrevResults = prevResultData.slice(pagesVisited, pagesVisited + resultPerPage).map((order, index) => {\r\n        return (\r\n            <div className=\"checkin-modal-body\" key={index}>\r\n            <div className=\"order-dits\">\r\n                <strong>Patient Name:</strong> {order.Patientlists[0].lastname}, {order.Patientlists[0].firstname} {order.Patientlists[0].middlename}<br />\r\n                <strong>Lab Number:</strong> {order.labNumber}<br />\r\n                <strong className=\"red\">Release Date: {Moment(order.createdAt).format('MMMM DD, yyyy h:MM:ss a')}<br /></strong>\r\n            <br /></div>\r\n\r\n            <table className=\"tablelab\">\r\n                <tbody>\r\n                    <tr className=\"labheader\">\r\n                        <th>Test</th>\r\n                        <th>Result</th>\r\n                        <th>Unit</th>\r\n                        <th>Reference</th>\r\n                    </tr>\r\n\r\n                    {order.Sectionorders[0].Sectionresults.map((test, index) => {\r\n                    return(\r\n                        <PrevTr key={index} test={test} prevResultData={order} />\r\n                    )\r\n                })}\r\n\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const closePrevResModal = () => {\r\n        setShowPrevResModal(false);\r\n        console.log(prevResultData.length);\r\n    }\r\n\r\n    if(!showPrevResModal){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkin-modal\">\r\n        <div className=\"pres-modal-wrapper\"> \r\n            <div className=\"checkin-modal-header\">\r\n                <div><strong>Previous Result Module:</strong></div>\r\n                <div className=\"checkin-closebtn\" onClick={closePrevResModal}>X</div>\r\n            </div>\r\n                {displayPrevResults}\r\n            <div className=\"checkin-modal-footer\">\r\n            {pageCount > 1 &&\r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"pagination-bttns\"}\r\n                        previousLinkClassName={\"prevBttn\"}\r\n                        nextLinkClassName={\"nextbtn\"}\r\n                        disabledClassName={\"pgnte-disabled\"}\r\n                        activeClassName={\"pgninate-active\"}\r\n                    />\r\n            }\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PrevResultModal\r\n","import React from 'react'\r\nimport './chemresult.css'\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react'\r\nimport ChemTest from './ChemTest'\r\nimport { useHistory } from 'react-router-dom';\r\nimport PrevResultModal from './PrevResultModal';\r\n\r\n    function ChemResultmodal ({setSectionData, showPrevResModal, setShowPrevResModal, setPrevResultData, prevResultData, setSectionResultArray,setResultFormData, show, closeModal, resultFormData, sectionResultArray} ) {\r\n    \r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [patholist, setPatho] = useState();\r\n    const [pathoSelected, setPathoSelected] = useState(\"invalid\");\r\n\r\n    let history = useHistory();\r\n\r\n\r\n    useEffect(()=>{\r\n      if(prevResultData || prevResultData == null){\r\n        setIsLoading(false);\r\n        axios.post(`http://localhost:3001/auth/pathofetch`).then((response) => {\r\n            setPatho(response.data);\r\n        })\r\n      }\r\n\r\n    },[prevResultData])\r\n\r\n    const prevResClick = () => {\r\n        setShowPrevResModal(true);\r\n    }\r\n\r\n    const onRelease = async () => {\r\n        if(pathoSelected === \"invalid\"){\r\n            alert(\"Please select pathologist before releasing!\")\r\n        }else{\r\n            const sectOrderID = resultFormData[0].Sectionorders[0].id;\r\n\r\n        await axios.post(`http://localhost:3001/order/result/release/${sectOrderID}/RELEASED`, {pathologist: pathoSelected} ,\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in. Please log-in!\");\r\n                history.push('/login');\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n\r\n        // RE RENDER DATA\r\n        \r\n\r\n        await axios.get(`http://localhost:3001/order/resultform/${resultFormData[0].labNumber}/${resultFormData[0].Sectionorders[0].section}`).then((response) => {\r\n            setResultFormData(response.data);\r\n            setSectionResultArray(response.data[0].Sectionorders[0].Sectionresults);\r\n        })\r\n\r\n        //CHECK IF ALL TESTS COMPLETED\r\n        await axios.post(`http://localhost:3001/order/check/${resultFormData[0].labNumber}`).then((response) => {\r\n        })\r\n        }\r\n    }\r\n\r\n    const undoCheckIn = async () => {\r\n        await axios.post(`http://localhost:3001/order/updatesorder`, {\r\n            sectNumber: resultFormData[0].Sectionorders[0].sectNumber,\r\n            status: \"Sample Rejected - For Check-In\"\r\n        }, {\r\n            headers:{\r\n                    accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        })\r\n\r\n        //Rerender Data\r\n        axios.get(`http://localhost:3001/order/section/Chemistry`).then((response) => {\r\n            setSectionData(response.data);\r\n        })\r\n\r\n        closeModal();\r\n    }\r\n\r\n    const onUndoRelease = async () => {\r\n        setPathoSelected(\"invalid\")\r\n        const sectOrderID = resultFormData[0].Sectionorders[0].id\r\n\r\n        await axios.post(`http://localhost:3001/order/result/release/${sectOrderID}/RUNNING`, {pathologist: null},\r\n        {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in. Please log-in!\");\r\n                history.push('/login');\r\n            }\r\n        }).catch((err) => {\r\n            console.log(\"Record not updated\");\r\n        })\r\n\r\n        // RE RENDER DATA\r\n\r\n        await axios.get(`http://localhost:3001/order/resultform/${resultFormData[0].labNumber}/${resultFormData[0].Sectionorders[0].section}`).then((response) => {\r\n            setResultFormData(response.data);\r\n            setSectionResultArray(response.data[0].Sectionorders[0].Sectionresults);\r\n        })\r\n\r\n        //CHECK IF ALL TESTS COMPLETED\r\n        await axios.post(`http://localhost:3001/order/check/${resultFormData[0].labNumber}`).then((response) => {\r\n\r\n        })\r\n    }\r\n\r\n    const onSelectChange = (e) => {\r\n        setPathoSelected(e.target.value)\r\n    }\r\n\r\n    \r\n\r\n    if(!show){\r\n        return null\r\n    }\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <h3>Loading...</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"checkin-modal\">\r\n            <div className=\"result-modal-wrapper\">\r\n                <div className=\"checkin-modal-header\">\r\n                    <div><strong>Result Entry for Lab Number: {resultFormData[0].labNumber}</strong></div>\r\n                    <div className=\"checkin-closebtn\" onClick={closeModal}>X</div>\r\n                </div>\r\n                    <div className=\"lab-modal-body\">\r\n                        {resultFormData[0].Sectionorders[0].status === \"RELEASED\" && <h2 className=\"red\">Released</h2>}\r\n                        <p className=\"order-dits\">\r\n                            <strong>Patient Name:</strong> {resultFormData[0].Patientlists[0].lastname}, {resultFormData[0].Patientlists[0].firstname} {resultFormData[0].Patientlists[0].middlename}<br />\r\n                            <strong>Section:</strong> {resultFormData[0].Sectionorders[0].section}<br />\r\n                            <strong>Section Number:</strong> {resultFormData[0].Sectionorders[0].sectNumber}<br />\r\n                            {prevResultData != null && resultFormData[0].Sectionorders[0].status === \"RUNNING\" && prevResultData.length > 0 && <input onClick={prevResClick} type=\"button\" value=\"Show previous result\" className=\"checkin-btn reject\" />}\r\n                        </p>  \r\n                            {/* Prev Result Modal */}\r\n                            {prevResultData != null &&\r\n                            <PrevResultModal showPrevResModal={showPrevResModal} setShowPrevResModal={setShowPrevResModal} prevResultData={prevResultData} />}\r\n\r\n\r\n                            <br />\r\n                            <table className=\"tablelab\">\r\n                                <tbody>\r\n                                    <tr className=\"labheader\">\r\n                                        <th>Test</th>\r\n                                        <th>Result</th>\r\n                                        <th>Unit</th>\r\n                                        <th>Reference</th>\r\n                                    </tr>\r\n                                    \r\n                                    {sectionResultArray.map((test, index) => {\r\n                                    return(\r\n                                    <ChemTest key={index} status={resultFormData[0].Sectionorders[0].status} ptdata={resultFormData[0].Patientlists[0]} test={test} />\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                    </div>\r\n                <div className=\"res-footer\">\r\n                    <label>Pathologist:</label>\r\n                                <br />\r\n                            {resultFormData[0].Sectionorders[0].status === \"RELEASED\" && \r\n                                <select  id=\"form-field\" disabled={true}>\r\n                                <option>{resultFormData[0].Sectionorders[0].pathologist}</option>\r\n                                </select>\r\n                            }\r\n                            {resultFormData[0].Sectionorders[0].status === \"RUNNING\" && \r\n                                <select  id=\"form-field\" onChange={onSelectChange}>\r\n                                <option value=\"invalid\">Select...</option>\r\n                                {patholist.map((patho, index) => {\r\n                                    \r\n                                    return(\r\n                                        <option key={index} value={patho.name}>{patho.name}</option>\r\n                                    )\r\n                                })}\r\n                                </select>\r\n                            }\r\n                            <br /><br />\r\n                            {resultFormData[0].Sectionorders[0].status === \"RUNNING\" && \r\n                                <input type=\"button\" onClick={onRelease} className=\"checkin-btn accept\" value=\"Release\"/>\r\n                            }\r\n                            {resultFormData[0].Sectionorders[0].status === \"RUNNING\" && \r\n                            <input type=\"button\" onClick={undoCheckIn} className=\"checkin-btn reject\" value=\"Undo Check-in/Reject sample\" />\r\n                            }\r\n                            {resultFormData[0].Sectionorders[0].status === \"RELEASED\" && <input type=\"button\" onClick={onUndoRelease} className=\"checkin-btn reject\" value=\"Undo Release\" />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChemResultmodal\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Header from '../../Header';\r\nimport LabNav from '../LabNav';\r\nimport ChemTr from './ChemTr';\r\nimport ChemResultmodal from './ChemResultmodal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport NotLoggedInModal from '../../NotLoggedInModal';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react'\r\nimport LabLoadingModal from '../../LabLoadingModal';\r\n\r\n\r\nfunction ChemForm() {\r\n\r\n    const [sectionData, setSectionData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [resultFormData, setResultFormData] = useState();\r\n    const [sectionResultArray, setSectionResultArray] = useState();\r\n    const [prevResultData, setPrevResultData] = useState();\r\n    const [showPrevResModal, setShowPrevResModal] = useState(false);\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        await axios.get(`http://localhost:3001/order/section/Chemistry/${data.labNumber}`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShow(false);\r\n    }\r\n \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/section/Chemistry`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[sectionResultArray])\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 15;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(sectionData.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = sectionData.slice(pagesVisited, pagesVisited + orderPerPage).map((details) => {\r\n        return (<ChemTr \r\n            details={details} \r\n            key={details.id}\r\n            setShow={setShow}\r\n            setResultFormData={setResultFormData}\r\n            setSectionResultArray={setSectionResultArray}\r\n            prevResultData={prevResultData}\r\n            setPrevResultData={setPrevResultData}     \r\n        />)\r\n    })\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LabLoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n        <NotLoggedInModal />\r\n        <Header />\r\n        <LabNav />\r\n          <section>\r\n          <div className=\"ptregwrapper\">\r\n            <div className=\"labwrapper\">\r\n                <h1 className=\"labcontentheader\">&nbsp; Clinical Chemistry</h1>\r\n                \r\n                <div className=\"labdiv\">\r\n                    <div className=\"labdivcontent\">\r\n                        <div className=\"labdiv-flex-block\">\r\n\r\n                        <div className=\"form-content\">\r\n                            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                <Form  className=\"margin-0\">\r\n                                    <label className = \"filter-label\">Filter:</label>\r\n                                    <Field \r\n                                            name=\"labNumber\"\r\n                                            id=\"form-field\"\r\n                                            type=\"text\"\r\n                                            placeholder = \"Enter lab no...\"\r\n                                    />\r\n                                    <button className=\"form-botton filter\" type=\"submit\">Search</button>\r\n                                </Form>\r\n                            </Formik>\r\n                        </div>\r\n                            \r\n                        </div>\r\n\r\n                        <br /> \r\n                        <table className=\"tablelab\">\r\n                            <tbody>\r\n                                <tr className=\"labheader\">\r\n                                    <th>LabNumber</th>\r\n                                    <th>Client Name</th>\r\n                                    <th>Test/s</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                                {displayOrders}\r\n                                {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                    <ChemResultmodal\r\n                        show={show}\r\n                        closeModal={closeModal}\r\n                        resultFormData={resultFormData}\r\n                        sectionResultArray={sectionResultArray}\r\n                        setSectionResultArray={setSectionResultArray}\r\n                        setResultFormData={setResultFormData}\r\n                        prevResultData={prevResultData}\r\n                        setPrevResultData={setPrevResultData}\r\n                        showPrevResModal = {showPrevResModal}\r\n                        setShowPrevResModal = {setShowPrevResModal}\r\n                        setSectionData={setSectionData}\r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n              \r\n         </div>\r\n         </section>\r\n          <footer>Laboratory Information System by Bregs</footer>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChemForm\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Header from '../../Header';\r\nimport LabNav from '../LabNav';\r\nimport ChemTr from '../chemistry/ChemTr';\r\nimport ChemResultmodal from '../chemistry/ChemResultmodal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport NotLoggedInModal from '../../NotLoggedInModal';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react'\r\nimport LabLoadingModal from '../../LabLoadingModal';\r\n\r\n\r\nfunction Hemaform() {\r\n\r\n    const [sectionData, setSectionData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [resultFormData, setResultFormData] = useState();\r\n    const [sectionResultArray, setSectionResultArray] = useState();\r\n    const [prevResultData, setPrevResultData] = useState();\r\n    const [showPrevResModal, setShowPrevResModal] = useState(false);\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        await axios.get(`http://localhost:3001/order/section/Hematology/${data.labNumber}`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShow(false);\r\n    }\r\n \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/section/Hematology`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[sectionResultArray])\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 15;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(sectionData.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = sectionData.slice(pagesVisited, pagesVisited + orderPerPage).map((details) => {\r\n        return (<ChemTr \r\n            details={details} \r\n            key={details.id}\r\n            setShow={setShow}\r\n            setResultFormData={setResultFormData}\r\n            setSectionResultArray={setSectionResultArray}\r\n            prevResultData={prevResultData}\r\n            setPrevResultData={setPrevResultData}     \r\n        />)\r\n    })\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LabLoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n        <NotLoggedInModal />\r\n        <Header />\r\n        <LabNav />\r\n          <section>\r\n          <div className=\"ptregwrapper\">\r\n            <div className=\"labwrapper\">\r\n                <h1 className=\"labcontentheader-hema\">&nbsp; Hematology</h1>\r\n                \r\n                <div className=\"labdiv\">\r\n                    <div className=\"labdivcontent\">\r\n                        <div className=\"labdiv-flex-block\">\r\n\r\n                        <div className=\"form-content\">\r\n                            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                <Form  className=\"margin-0\">\r\n                                    <label className = \"filter-label\">Filter:</label>\r\n                                    <Field \r\n                                            name=\"labNumber\"\r\n                                            id=\"form-field\"\r\n                                            type=\"text\"\r\n                                            placeholder = \"Enter lab no...\"\r\n                                    />\r\n                                    <button className=\"form-botton filter\" type=\"submit\">Search</button>\r\n                                </Form>\r\n                            </Formik>\r\n                        </div>\r\n                            \r\n                        </div>\r\n\r\n                        <br /> \r\n                        <table className=\"tablelab\">\r\n                            <tbody>\r\n                                <tr className=\"labheader\">\r\n                                    <th>LabNumber</th>\r\n                                    <th>Client Name</th>\r\n                                    <th>Test/s</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                                {displayOrders}\r\n                                {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                    <ChemResultmodal\r\n                        show={show}\r\n                        closeModal={closeModal}\r\n                        resultFormData={resultFormData}\r\n                        sectionResultArray={sectionResultArray}\r\n                        setSectionResultArray={setSectionResultArray}\r\n                        setResultFormData={setResultFormData}\r\n                        prevResultData={prevResultData}\r\n                        setPrevResultData={setPrevResultData}\r\n                        showPrevResModal = {showPrevResModal}\r\n                        setShowPrevResModal = {setShowPrevResModal}\r\n                        setSectionData={setSectionData}\r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n              \r\n         </div>\r\n         </section>\r\n          <footer>Laboratory Information System by Bregs</footer>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Hemaform\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport { useHistory, } from 'react-router-dom';\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport NotLoggedInModal from '../NotLoggedInModal';\r\n\r\nfunction Results() {\r\n    let history = useHistory();\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        await axios.get(`http://localhost:3001/order/getorder/${data.labNumber}`, {\r\n            headers: {\r\n                accessToken: localStorage.getItem(\"accessToken\"),\r\n            }\r\n        }).then((response) => {\r\n            if(response.data.error){\r\n                alert(\"You are not logged in. Please log-in!\");\r\n                history.push('/login');\r\n            }\r\n            if(response.data.length > 0){\r\n                history.push(`/order/${response.data[0].labNumber}`);\r\n            }else{\r\n                alert(\"No orders found in that lab number!\")\r\n            }\r\n        })\r\n    }\r\n \r\n    return (\r\n            <div className=\"labwrapper\">\r\n                <NotLoggedInModal />\r\n                <h1 className=\"labcontentheader-results\">&nbsp; Results</h1>\r\n                \r\n                <div className=\"labdiv\">\r\n                    <div className=\"labdivcontent\">\r\n                        <div className=\"block\">\r\n                            <div>\r\n                                <h4>Enter Laboratory Number:</h4>\r\n                            </div>\r\n                            <div>\r\n                            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                <Form className=\"margin-0\">\r\n                                <div className=\"form-content labdiv-flex-block\">\r\n                                    <Field \r\n                                        name=\"labNumber\"\r\n                                        autoComplete=\"off\"\r\n                                        id=\"form-field\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Enter lab no...\"\r\n                                        className=\"mr-10\"\r\n                                    />\r\n                                    <button className=\"form-content form-botton margin-0\" type=\"submit\">Submit</button>\r\n                                </div><ErrorMessage name=\"labNumber\" component=\"span\" /><br />\r\n                                    \r\n                                </Form>\r\n                            </Formik>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React from 'react'\r\nimport Moment from 'moment'\r\n\r\n\r\nfunction PrevTrxTr({detail}) {\r\n    return (\r\n        <tr>\r\n            <td>{detail.labNumber}</td>\r\n            <td>{Moment(detail.createdAt).format('MMMM DD, yyyy')}</td>\r\n            <td>{detail.testsRequested}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default PrevTrxTr\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { useParams } from 'react-router-dom';\r\nimport '../../components/ptregistration/ptreg.css'\r\nimport './orderdetails.css'\r\nimport PrevTrxTr from './PrevTrxTr'\r\n\r\n\r\nfunction PrevTrx() {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [orderDetails, setOrderDetails] = useState([])\r\n    let { pId } = useParams();\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/trx/prev/${pId}`).then((response) => {\r\n            setOrderDetails(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[pId])\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"ptregwrapper\">\r\n            <h3>Loading...</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"labwrapper-orderdeats\">\r\n        <h1 className=\"labcontentheader-orderdeats\">&nbsp;Prev Orders</h1>\r\n            <div className=\"labdiv\">\r\n                <div className=\"labdivcontent p-10\">\r\n                    <h4 className=\"center\">Showing Previous Transactions of</h4>\r\n                    </div>\r\n                    <div className=\"divblock p-10\">\r\n                    <strong>Name:</strong> <p className=\"orderdetail\">{orderDetails[0].lastname}, {orderDetails[0].firstname} {orderDetails[0].middlename}</p>\r\n                    </div>\r\n\r\n                    <div className=\"divblock p-10\">\r\n                    <strong>Age/Gender:</strong> <p className=\"orderdetail\">{orderDetails[0].age}/{orderDetails[0].gender}</p>\r\n                    </div><br />\r\n\r\n                <div className=\"divblock p-10\">\r\n                    <strong>Transaction/s:</strong>\r\n                </div>\r\n                <div className=\"divblock p-10\">\r\n                <table className=\"detailtable\">\r\n                    <tbody>\r\n                        <tr className=\"header\">\r\n                            <th>Laboratory Number</th>\r\n                            <th>Date</th>\r\n                            <th>Test/s</th>\r\n                        </tr>\r\n                        {orderDetails[0].Orders.map((detail, index) => {\r\n                            return (\r\n                                <PrevTrxTr detail={detail} key={index} />\r\n                                )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                </div>\r\n                <br />\r\n                <br />\r\n                <div className=\"divblock p-10\">\r\n                </div><br />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PrevTrx\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Header from '../../Header';\r\nimport LabNav from '../LabNav';\r\nimport ChemTr from '../chemistry/ChemTr';\r\nimport ChemResultmodal from '../chemistry/ChemResultmodal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport NotLoggedInModal from '../../NotLoggedInModal';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react'\r\nimport LabLoadingModal from '../../LabLoadingModal';\r\n\r\n\r\nfunction Cmform() {\r\n\r\n    const [sectionData, setSectionData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [resultFormData, setResultFormData] = useState();\r\n    const [sectionResultArray, setSectionResultArray] = useState();\r\n    const [prevResultData, setPrevResultData] = useState();\r\n    const [showPrevResModal, setShowPrevResModal] = useState(false);\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        await axios.get(`http://localhost:3001/order/section/CM/${data.labNumber}`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShow(false);\r\n    }\r\n \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/section/CM`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[sectionResultArray])\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 15;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(sectionData.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = sectionData.slice(pagesVisited, pagesVisited + orderPerPage).map((details) => {\r\n        return (<ChemTr \r\n            details={details} \r\n            key={details.id}\r\n            setShow={setShow}\r\n            setResultFormData={setResultFormData}\r\n            setSectionResultArray={setSectionResultArray}\r\n            prevResultData={prevResultData}\r\n            setPrevResultData={setPrevResultData}     \r\n        />)\r\n    })\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LabLoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n        <NotLoggedInModal />\r\n        <Header />\r\n        <LabNav />\r\n          <section>\r\n          <div className=\"ptregwrapper\">\r\n            <div className=\"labwrapper\">\r\n                <h1 className=\"labcontentheader\">&nbsp; Clinical Microsopy</h1>\r\n                \r\n                <div className=\"labdiv\">\r\n                    <div className=\"labdivcontent\">\r\n                        <div className=\"labdiv-flex-block\">\r\n\r\n                        <div className=\"form-content\">\r\n                            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                <Form  className=\"margin-0\">\r\n                                    <label className = \"filter-label\">Filter:</label>\r\n                                    <Field \r\n                                            name=\"labNumber\"\r\n                                            id=\"form-field\"\r\n                                            type=\"text\"\r\n                                            placeholder = \"Enter lab no...\"\r\n                                    />\r\n                                    <button className=\"form-botton filter\" type=\"submit\">Search</button>\r\n                                </Form>\r\n                            </Formik>\r\n                        </div>\r\n                            \r\n                        </div>\r\n\r\n                        <br /> \r\n                        <table className=\"tablelab\">\r\n                            <tbody>\r\n                                <tr className=\"labheader\">\r\n                                    <th>LabNumber</th>\r\n                                    <th>Client Name</th>\r\n                                    <th>Test/s</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                                {displayOrders}\r\n                                {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                    <ChemResultmodal\r\n                        show={show}\r\n                        closeModal={closeModal}\r\n                        resultFormData={resultFormData}\r\n                        sectionResultArray={sectionResultArray}\r\n                        setSectionResultArray={setSectionResultArray}\r\n                        setResultFormData={setResultFormData}\r\n                        prevResultData={prevResultData}\r\n                        setPrevResultData={setPrevResultData}\r\n                        showPrevResModal = {showPrevResModal}\r\n                        setShowPrevResModal = {setShowPrevResModal}\r\n                        setSectionData={setSectionData}\r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n              \r\n         </div>\r\n         </section>\r\n          <footer>Laboratory Information System by Bregs</footer>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cmform\r\n","import React from 'react'\r\nimport axios from 'axios';\r\n\r\nimport Header from '../../Header';\r\nimport LabNav from '../LabNav';\r\nimport ChemTr from '../chemistry/ChemTr';\r\nimport ChemResultmodal from '../chemistry/ChemResultmodal';\r\nimport ReactPaginate from 'react-paginate';\r\nimport NotLoggedInModal from '../../NotLoggedInModal';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useState, useEffect } from 'react'\r\nimport LabLoadingModal from '../../LabLoadingModal';\r\n\r\n\r\nfunction Cmform() {\r\n\r\n    const [sectionData, setSectionData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [show, setShow] = useState(false);\r\n    const [resultFormData, setResultFormData] = useState();\r\n    const [sectionResultArray, setSectionResultArray] = useState();\r\n    const [prevResultData, setPrevResultData] = useState();\r\n    const [showPrevResModal, setShowPrevResModal] = useState(false);\r\n\r\n    const initialValues = {\r\n        labNumber: \"\",\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        labNumber: Yup.string().required(\"This field is required!\"),\r\n\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        await axios.get(`http://localhost:3001/order/section/Serology/${data.labNumber}`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShow(false);\r\n    }\r\n \r\n    useEffect(() => {\r\n        axios.get(`http://localhost:3001/order/section/Serology`).then((response) => {\r\n            setSectionData(response.data);\r\n            setIsLoading(false);\r\n        })\r\n    },[sectionResultArray])\r\n\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const orderPerPage = 15;\r\n    const pagesVisited = pageNumber * orderPerPage\r\n    const pageCount = Math.ceil(sectionData.length / orderPerPage);\r\n\r\n    const changePage = ({selected}) => {\r\n        setPageNumber(selected);\r\n    }\r\n\r\n    const displayOrders = sectionData.slice(pagesVisited, pagesVisited + orderPerPage).map((details) => {\r\n        return (<ChemTr \r\n            details={details} \r\n            key={details.id}\r\n            setShow={setShow}\r\n            setResultFormData={setResultFormData}\r\n            setSectionResultArray={setSectionResultArray}\r\n            prevResultData={prevResultData}\r\n            setPrevResultData={setPrevResultData}     \r\n        />)\r\n    })\r\n\r\n    if(isLoading){\r\n        return (\r\n            <div className=\"ptregwrapper\">\r\n                <LabLoadingModal />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n        <NotLoggedInModal />\r\n        <Header />\r\n        <LabNav />\r\n          <section>\r\n          <div className=\"ptregwrapper\">\r\n            <div className=\"labwrapper\">\r\n                <h1 className=\"labcontentheader-sero\">&nbsp; Serology</h1>\r\n                \r\n                <div className=\"labdiv\">\r\n                    <div className=\"labdivcontent\">\r\n                        <div className=\"labdiv-flex-block\">\r\n\r\n                        <div className=\"form-content\">\r\n                            <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                                <Form  className=\"margin-0\">\r\n                                    <label className = \"filter-label\">Filter:</label>\r\n                                    <Field \r\n                                            name=\"labNumber\"\r\n                                            id=\"form-field\"\r\n                                            type=\"text\"\r\n                                            placeholder = \"Enter lab no...\"\r\n                                    />\r\n                                    <button className=\"form-botton filter\" type=\"submit\">Search</button>\r\n                                </Form>\r\n                            </Formik>\r\n                        </div>\r\n                            \r\n                        </div>\r\n\r\n                        <br /> \r\n                        <table className=\"tablelab\">\r\n                            <tbody>\r\n                                <tr className=\"labheader\">\r\n                                    <th>LabNumber</th>\r\n                                    <th>Client Name</th>\r\n                                    <th>Test/s</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                                {displayOrders}\r\n                                {pageCount > 1 &&                     \r\n                        <ReactPaginate\r\n                        previousLabel = {\"<\"}\r\n                        nextLabel = {\">\"}\r\n                        pageCount = {pageCount}\r\n                        onPageChange={changePage}\r\n                        containerClassName={\"orders-pagination-bttns\"}\r\n                        previousLinkClassName={\"orders-prevBttn\"}\r\n                        nextLinkClassName={\"orders-nextbtn\"}\r\n                        disabledClassName={\"orders-pgnte-disabled\"}\r\n                        activeClassName={\"orders-pgninate-active\"}\r\n                    />}\r\n\r\n                            </tbody>\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                    <ChemResultmodal\r\n                        show={show}\r\n                        closeModal={closeModal}\r\n                        resultFormData={resultFormData}\r\n                        sectionResultArray={sectionResultArray}\r\n                        setSectionResultArray={setSectionResultArray}\r\n                        setResultFormData={setResultFormData}\r\n                        prevResultData={prevResultData}\r\n                        setPrevResultData={setPrevResultData}\r\n                        showPrevResModal = {showPrevResModal}\r\n                        setShowPrevResModal = {setShowPrevResModal}\r\n                        setSectionData={setSectionData}\r\n                    />\r\n                    \r\n                </div>\r\n            </div>\r\n              \r\n         </div>\r\n         </section>\r\n          <footer>Laboratory Information System by Bregs</footer>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cmform\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom';\r\n\r\nimport Header from './components/Header';\r\nimport Ptreg from './components/ptregistration/Ptreg';\r\nimport Ptsearch from \"./components/ptsearch/Ptsearch\";\r\nimport Searchresult from './components/ptsearch/Searchresult';\r\nimport Noptrecord from './components/ptsearch/Noptrecord';\r\nimport Updatept from './components/updatept/Updatept';\r\nimport Addorder from './components/addorder/Addorder';\r\nimport UserLogin from './components/users/UserLogin';\r\nimport UserReg from './components/users/UserReg';\r\nimport Orders from './components/orders/Orders';\r\nimport OrderDetails from './components/orders/OrderDetails';\r\nimport LabClient from './components/laboratory/LabClient';\r\nimport ChemForm from './components/laboratory/chemistry/ChemForm';\r\nimport Hemaform from './components/laboratory/hema/Hemaform';\r\nimport Results from './components/results/Results'\r\nimport PrevTrx from './components/orders/PrevTrx'\r\n\r\nimport { AuthContext } from './helpers/AuthContext';\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport ResultFormA4 from './components/results/ResultFormA4';\r\nimport Cmform from './components/laboratory/cm/CmForm';\r\nimport Seroform from './components/laboratory/sero/Seroform'\r\n\r\nconst App = () => {\r\n\r\n  const [authState, setAuthState] = useState({name: \"\", username: \"\", id: 0, status: false});\r\n  \r\n\r\nuseEffect(() => {\r\n  axios.get(\"http://localhost:3001/auth/auth\",{\r\n    headers:{\r\n      accessToken: localStorage.getItem(\"accessToken\"),\r\n    }\r\n  }).then((response) => {\r\n    if(response.data.error){\r\n      //setAuthState({...authState, status: false});\r\n      setAuthState(prevAuthState => {\r\n        return { ...prevAuthState, status: false}\r\n      })\r\n    }else{\r\n      setAuthState(() => {\r\n        return { name: response.data.name, username: response.data.username, id: response.data.id, status: true}\r\n      })\r\n      //setAuthState({name: response.data.name, username: response.data.username, id: response.data.id, status: true});\r\n    }\r\n})\r\n},[setAuthState])\r\n\r\n  return (\r\n    <AuthContext.Provider value={{authState, setAuthState}}>\r\n      <Router>\r\n        <Switch>\r\n            <Route path=\"/laboratory\" exact component={LabClient} />\r\n            <Route path=\"/laboratory/chemistry\" exact component={ChemForm} />\r\n            <Route path=\"/laboratory/hematology\" exact component={Hemaform} />\r\n            <Route path=\"/laboratory/cm\" exact component={Cmform} />\r\n            <Route path=\"/laboratory/sero\" exact component={Seroform} />\r\n            <Route path=\"/login\" exact component={UserLogin} />\r\n            <Route path=\"/register\" exact component={UserReg} />\r\n            <div className=\"wrapper\">\r\n              <Header />\r\n              <nav>\r\n                <li>\r\n                    <ul><Link to=\"/ptsearch\">Patient Search</Link></ul>\r\n                    <ul><Link to=\"/registerpatient\">Patient Registration</Link></ul>\r\n                    <ul><Link to=\"/orders\">Orders</Link></ul>\r\n                    <ul><Link to=\"/laboratory\">Laboratory</Link></ul>\r\n                    <ul><Link to=\"/results\">Results</Link></ul>\r\n                </li>\r\n              </nav>\r\n              <section>\r\n                \r\n                <Route path=\"/\" exact component={Ptsearch} />\r\n                <Route path=\"/ptsearch\" component={Ptsearch} />\r\n                <Route path=\"/registerpatient\" component={Ptreg} />\r\n                <Route path=\"/searchresults/:param\" component={Searchresult}/>\r\n                <Route path=\"/noptfound\" component={Noptrecord}/>\r\n                <Route path=\"/updatept/:pId\" component={Updatept}/>\r\n                <Route path=\"/porders/:pId\" component={PrevTrx}/>\r\n                <Route path=\"/addorder/for:pId\" component={Addorder}/>\r\n                <Route path=\"/orders\" component={Orders}/>\r\n                <Route path=\"/order/:labNumber\" component={OrderDetails}/>\r\n                <Route path=\"/results/\" component={Results}/>\r\n                <Route path=\"/resultform/\" component={ResultFormA4}/>\r\n              </section>\r\n              <footer>Laboratory Information System by Bregs</footer>\r\n              \r\n            </div>\r\n          </Switch>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}